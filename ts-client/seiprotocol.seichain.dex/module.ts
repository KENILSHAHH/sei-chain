// Generated by Ignite ignite.com/cli

import { StdFee } from "@cosmjs/launchpad";
import { SigningStargateClient, DeliverTxResponse } from "@cosmjs/stargate";
import { EncodeObject, GeneratedType, OfflineSigner, Registry } from "@cosmjs/proto-signing";
import { msgTypes } from './registry';
import { IgniteClient } from "../client"
import { MissingWalletError } from "../helpers"
import { Api } from "./rest";
import { MsgCancelOrders } from "./types/dex/tx";
import { MsgPlaceOrders } from "./types/dex/tx";
import { MsgContractDepositRent } from "./types/dex/tx";
import { MsgRegisterContract } from "./types/dex/tx";
import { MsgUnregisterContract } from "./types/dex/tx";
import { MsgRegisterPairs } from "./types/dex/tx";
import { MsgUpdatePriceTickSize } from "./types/dex/tx";
import { MsgUnsuspendContract } from "./types/dex/tx";
import { MsgUpdateQuantityTickSize } from "./types/dex/tx";


export { MsgCancelOrders, MsgPlaceOrders, MsgContractDepositRent, MsgRegisterContract, MsgUnregisterContract, MsgRegisterPairs, MsgUpdatePriceTickSize, MsgUnsuspendContract, MsgUpdateQuantityTickSize };

type sendMsgCancelOrdersParams = {
  value: MsgCancelOrders,
  fee?: StdFee,
  memo?: string
};

type sendMsgPlaceOrdersParams = {
  value: MsgPlaceOrders,
  fee?: StdFee,
  memo?: string
};

type sendMsgContractDepositRentParams = {
  value: MsgContractDepositRent,
  fee?: StdFee,
  memo?: string
};

type sendMsgRegisterContractParams = {
  value: MsgRegisterContract,
  fee?: StdFee,
  memo?: string
};

type sendMsgUnregisterContractParams = {
  value: MsgUnregisterContract,
  fee?: StdFee,
  memo?: string
};

type sendMsgRegisterPairsParams = {
  value: MsgRegisterPairs,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdatePriceTickSizeParams = {
  value: MsgUpdatePriceTickSize,
  fee?: StdFee,
  memo?: string
};

type sendMsgUnsuspendContractParams = {
  value: MsgUnsuspendContract,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateQuantityTickSizeParams = {
  value: MsgUpdateQuantityTickSize,
  fee?: StdFee,
  memo?: string
};


type msgCancelOrdersParams = {
  value: MsgCancelOrders,
};

type msgPlaceOrdersParams = {
  value: MsgPlaceOrders,
};

type msgContractDepositRentParams = {
  value: MsgContractDepositRent,
};

type msgRegisterContractParams = {
  value: MsgRegisterContract,
};

type msgUnregisterContractParams = {
  value: MsgUnregisterContract,
};

type msgRegisterPairsParams = {
  value: MsgRegisterPairs,
};

type msgUpdatePriceTickSizeParams = {
  value: MsgUpdatePriceTickSize,
};

type msgUnsuspendContractParams = {
  value: MsgUnsuspendContract,
};

type msgUpdateQuantityTickSizeParams = {
  value: MsgUpdateQuantityTickSize,
};


export const registry = new Registry(msgTypes);

const defaultFee = {
  amount: [],
  gas: "200000",
};

interface TxClientOptions {
  addr: string
	prefix: string
	signer?: OfflineSigner
}

export const txClient = ({ signer, prefix, addr }: TxClientOptions = { addr: "http://localhost:26657", prefix: "cosmos" }) => {

  return {
		
		async sendMsgCancelOrders({ value, fee, memo }: sendMsgCancelOrdersParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCancelOrders: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgCancelOrders({ value: MsgCancelOrders.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCancelOrders: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgPlaceOrders({ value, fee, memo }: sendMsgPlaceOrdersParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgPlaceOrders: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgPlaceOrders({ value: MsgPlaceOrders.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgPlaceOrders: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgContractDepositRent({ value, fee, memo }: sendMsgContractDepositRentParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgContractDepositRent: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgContractDepositRent({ value: MsgContractDepositRent.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgContractDepositRent: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgRegisterContract({ value, fee, memo }: sendMsgRegisterContractParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgRegisterContract: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgRegisterContract({ value: MsgRegisterContract.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgRegisterContract: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUnregisterContract({ value, fee, memo }: sendMsgUnregisterContractParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUnregisterContract: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgUnregisterContract({ value: MsgUnregisterContract.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUnregisterContract: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgRegisterPairs({ value, fee, memo }: sendMsgRegisterPairsParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgRegisterPairs: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgRegisterPairs({ value: MsgRegisterPairs.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgRegisterPairs: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdatePriceTickSize({ value, fee, memo }: sendMsgUpdatePriceTickSizeParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdatePriceTickSize: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgUpdatePriceTickSize({ value: MsgUpdatePriceTickSize.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdatePriceTickSize: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUnsuspendContract({ value, fee, memo }: sendMsgUnsuspendContractParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUnsuspendContract: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgUnsuspendContract({ value: MsgUnsuspendContract.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUnsuspendContract: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateQuantityTickSize({ value, fee, memo }: sendMsgUpdateQuantityTickSizeParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateQuantityTickSize: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgUpdateQuantityTickSize({ value: MsgUpdateQuantityTickSize.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateQuantityTickSize: Could not broadcast Tx: '+ e.message)
			}
		},
		
		
		msgCancelOrders({ value }: msgCancelOrdersParams): EncodeObject {
			try {
				return { typeUrl: "/seiprotocol.seichain.dex.MsgCancelOrders", value: MsgCancelOrders.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCancelOrders: Could not create message: ' + e.message)
			}
		},
		
		msgPlaceOrders({ value }: msgPlaceOrdersParams): EncodeObject {
			try {
				return { typeUrl: "/seiprotocol.seichain.dex.MsgPlaceOrders", value: MsgPlaceOrders.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgPlaceOrders: Could not create message: ' + e.message)
			}
		},
		
		msgContractDepositRent({ value }: msgContractDepositRentParams): EncodeObject {
			try {
				return { typeUrl: "/seiprotocol.seichain.dex.MsgContractDepositRent", value: MsgContractDepositRent.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgContractDepositRent: Could not create message: ' + e.message)
			}
		},
		
		msgRegisterContract({ value }: msgRegisterContractParams): EncodeObject {
			try {
				return { typeUrl: "/seiprotocol.seichain.dex.MsgRegisterContract", value: MsgRegisterContract.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgRegisterContract: Could not create message: ' + e.message)
			}
		},
		
		msgUnregisterContract({ value }: msgUnregisterContractParams): EncodeObject {
			try {
				return { typeUrl: "/seiprotocol.seichain.dex.MsgUnregisterContract", value: MsgUnregisterContract.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUnregisterContract: Could not create message: ' + e.message)
			}
		},
		
		msgRegisterPairs({ value }: msgRegisterPairsParams): EncodeObject {
			try {
				return { typeUrl: "/seiprotocol.seichain.dex.MsgRegisterPairs", value: MsgRegisterPairs.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgRegisterPairs: Could not create message: ' + e.message)
			}
		},
		
		msgUpdatePriceTickSize({ value }: msgUpdatePriceTickSizeParams): EncodeObject {
			try {
				return { typeUrl: "/seiprotocol.seichain.dex.MsgUpdatePriceTickSize", value: MsgUpdatePriceTickSize.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdatePriceTickSize: Could not create message: ' + e.message)
			}
		},
		
		msgUnsuspendContract({ value }: msgUnsuspendContractParams): EncodeObject {
			try {
				return { typeUrl: "/seiprotocol.seichain.dex.MsgUnsuspendContract", value: MsgUnsuspendContract.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUnsuspendContract: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateQuantityTickSize({ value }: msgUpdateQuantityTickSizeParams): EncodeObject {
			try {
				return { typeUrl: "/seiprotocol.seichain.dex.MsgUpdateQuantityTickSize", value: MsgUpdateQuantityTickSize.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateQuantityTickSize: Could not create message: ' + e.message)
			}
		},
		
	}
};

interface QueryClientOptions {
  addr: string
}

export const queryClient = ({ addr: addr }: QueryClientOptions = { addr: "http://localhost:1317" }) => {
  return new Api({ baseUrl: addr });
};

class SDKModule {
	public query: ReturnType<typeof queryClient>;
	public tx: ReturnType<typeof txClient>;
	
	public registry: Array<[string, GeneratedType]>;

	constructor(client: IgniteClient) {		
	
		this.query = queryClient({ addr: client.env.apiURL });
		this.tx = txClient({ signer: client.signer, addr: client.env.rpcURL, prefix: client.env.prefix ?? "cosmos" });
	}
};

const Module = (test: IgniteClient) => {
	return {
		module: {
			SeiprotocolSeichainDex: new SDKModule(test)
		},
		registry: msgTypes
  }
}
export default Module;