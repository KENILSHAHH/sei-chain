// Generated by Ignite ignite.com/cli

import { StdFee } from "@cosmjs/launchpad";
import { SigningStargateClient, DeliverTxResponse } from "@cosmjs/stargate";
import { EncodeObject, GeneratedType, OfflineSigner, Registry } from "@cosmjs/proto-signing";
import { msgTypes } from './registry';
import { IgniteClient } from "../client"
import { MissingWalletError } from "../helpers"
import { Api } from "./rest";
import { MsgRegisterPointer } from "./types/evm/v1/tx";
import { MsgEVMTransaction } from "./types/evm/v1/tx";
import { MsgSend } from "./types/evm/v1/tx";
import { MsgAssociateContractAddress } from "./types/evm/v1/tx";
import { MsgAssociate } from "./types/evm/v1/tx";


export { MsgRegisterPointer, MsgEVMTransaction, MsgSend, MsgAssociateContractAddress, MsgAssociate };

type sendMsgRegisterPointerParams = {
  value: MsgRegisterPointer,
  fee?: StdFee,
  memo?: string
};

type sendMsgEVMTransactionParams = {
  value: MsgEVMTransaction,
  fee?: StdFee,
  memo?: string
};

type sendMsgSendParams = {
  value: MsgSend,
  fee?: StdFee,
  memo?: string
};

type sendMsgAssociateContractAddressParams = {
  value: MsgAssociateContractAddress,
  fee?: StdFee,
  memo?: string
};

type sendMsgAssociateParams = {
  value: MsgAssociate,
  fee?: StdFee,
  memo?: string
};


type msgRegisterPointerParams = {
  value: MsgRegisterPointer,
};

type msgEVMTransactionParams = {
  value: MsgEVMTransaction,
};

type msgSendParams = {
  value: MsgSend,
};

type msgAssociateContractAddressParams = {
  value: MsgAssociateContractAddress,
};

type msgAssociateParams = {
  value: MsgAssociate,
};


export const registry = new Registry(msgTypes);

const defaultFee = {
  amount: [],
  gas: "200000",
};

interface TxClientOptions {
  addr: string
	prefix: string
	signer?: OfflineSigner
}

export const txClient = ({ signer, prefix, addr }: TxClientOptions = { addr: "http://localhost:26657", prefix: "cosmos" }) => {

  return {
		
		async sendMsgRegisterPointer({ value, fee, memo }: sendMsgRegisterPointerParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgRegisterPointer: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgRegisterPointer({ value: MsgRegisterPointer.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgRegisterPointer: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgEVMTransaction({ value, fee, memo }: sendMsgEVMTransactionParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgEVMTransaction: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgEVMTransaction({ value: MsgEVMTransaction.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgEVMTransaction: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgSend({ value, fee, memo }: sendMsgSendParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgSend: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgSend({ value: MsgSend.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgSend: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgAssociateContractAddress({ value, fee, memo }: sendMsgAssociateContractAddressParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgAssociateContractAddress: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgAssociateContractAddress({ value: MsgAssociateContractAddress.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgAssociateContractAddress: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgAssociate({ value, fee, memo }: sendMsgAssociateParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgAssociate: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgAssociate({ value: MsgAssociate.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgAssociate: Could not broadcast Tx: '+ e.message)
			}
		},
		
		
		msgRegisterPointer({ value }: msgRegisterPointerParams): EncodeObject {
			try {
				return { typeUrl: "/sei.evm.v1.MsgRegisterPointer", value: MsgRegisterPointer.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgRegisterPointer: Could not create message: ' + e.message)
			}
		},
		
		msgEVMTransaction({ value }: msgEVMTransactionParams): EncodeObject {
			try {
				return { typeUrl: "/sei.evm.v1.MsgEVMTransaction", value: MsgEVMTransaction.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgEVMTransaction: Could not create message: ' + e.message)
			}
		},
		
		msgSend({ value }: msgSendParams): EncodeObject {
			try {
				return { typeUrl: "/sei.evm.v1.MsgSend", value: MsgSend.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgSend: Could not create message: ' + e.message)
			}
		},
		
		msgAssociateContractAddress({ value }: msgAssociateContractAddressParams): EncodeObject {
			try {
				return { typeUrl: "/sei.evm.v1.MsgAssociateContractAddress", value: MsgAssociateContractAddress.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgAssociateContractAddress: Could not create message: ' + e.message)
			}
		},
		
		msgAssociate({ value }: msgAssociateParams): EncodeObject {
			try {
				return { typeUrl: "/sei.evm.v1.MsgAssociate", value: MsgAssociate.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgAssociate: Could not create message: ' + e.message)
			}
		},
		
	}
};

interface QueryClientOptions {
  addr: string
}

export const queryClient = ({ addr: addr }: QueryClientOptions = { addr: "http://localhost:1317" }) => {
  return new Api({ baseUrl: addr });
};

class SDKModule {
	public query: ReturnType<typeof queryClient>;
	public tx: ReturnType<typeof txClient>;
	
	public registry: Array<[string, GeneratedType]>;

	constructor(client: IgniteClient) {		
	
		this.query = queryClient({ addr: client.env.apiURL });
		this.tx = txClient({ signer: client.signer, addr: client.env.rpcURL, prefix: client.env.prefix ?? "cosmos" });
	}
};

const Module = (test: IgniteClient) => {
	return {
		module: {
			SeiEvmV1: new SDKModule(test)
		},
		registry: msgTypes
  }
}
export default Module;