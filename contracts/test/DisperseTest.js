const {generateWallet} = require("./lib");

describe("Disperse test", function () {
    let disperse;
    let signers;

    beforeEach(async function () {
        signers = await ethers.getSigners();
        const disperseFactory = await ethers.getContractFactory("Disperse")
        disperse = await disperseFactory.deploy(1,1);

        await Promise.all([disperse.waitForDeployment()])
    });

    async function sendAndWaitForReceipt(sendFunc) {
        const start = new Date().getTime();
        let resp = await sendFunc();
        const receipt = await resp.wait();
        const end = new Date().getTime();
        console.log("Block", receipt.blockNumber,
            "Gas used:", receipt.gasUsed.toString(),
            "Time (ms):", (end-start));
        return receipt;
    }

    it("should send one", async function() {
        const wallets = [ "0x4A50A0763A200523b6332d8cf75191cAC19124F1"]
        const values = []
        const count = 1;
        for (let i = 0; i < wallets.length; i++) {
            values.push(1)
        }
        await sendAndWaitForReceipt(async () => {
            return disperse.disperseEther(wallets, values, {value: wallets.length});
        });
    })

    // from 0xadde91e7ab72b3e74bad538149cd5f0b7d7dbbbd45c4e9b4bcca1a0b878a6b92
    it("should send to existing wallets", async function() {
        const wallets = [ "0x4A50A0763A200523b6332d8cf75191cAC19124F1", "0x71A3a151C0b792d2Ba153D811128B565b95F81da", "0x8f1A042fd0C29A429820b49652EC95E49E80cb93", "0xa37db0083fF0a4F560a24ecb239ADD954BE1E02f", "0x63ff4B88c9d37c7b4AF1f8c2B8867E12473775bc", "0x8ece7a643569dd7aF7cb3377dC856d2cd9e37762", "0x30DCdd13F0840F2A6AB02a245aae0d359c388890", "0x590d3ADFC53a9b5b7FCcf9309010769FE22D8354", "0xbd799fbE6667c290B6ef71AB38f1b3BfF99eDA53", "0x3732A7a59384c9408d89fac504BcB9f6c89895c4", "0xfdef25d237afebC8b0e4FFAE182fA6D90e2aF53e", "0x7534a306Afc17889674caD6b3d014Ce130c1DcC3", "0x1210A628a4b539E9cd7B94B26a057e3BA1689896", "0x07478A80935Fd18E231af51Fb8DA775E7039897C", "0xF0D46839D6E30d43Fd31864868Db7DC9591024cF", "0xEa42e63724Ec4Fb60EbdA47BB3D8926E4Ce7AE95", "0x8f83ec04aB72b3703854EBce2bE4a7e0feD20fcd", "0xdcDaF566f9DadA6a57accF78B585F367C8990302", "0xc96dEBC0dd2c0135CBc9995d700d1AfAf7720C18", "0x536Fd58567e13a6CA63D7ba5e4ad17ef7af8ade4", "0xeda0e493a3cA56134cE361844815B67241A33A55", "0x4b69862a1E58d1DF8241BDeFB2CC2B51Cb565374", "0x2Be420022135ad0eE5FF8B5075BA08F9D43cc36B", "0x8cc9fB7f5e380968bcAED6982A1d3cFc66E5048F", "0x256fAbAEDF8A8604E90CFeeF232f62e97f8da1AE", "0x2388136d6FEEE19BaF5FDbD2C8DCD24A42F4fAA6", "0x7E31cEFf2B15ab8cFC6685b22acddf9b2CE6AE68", "0x9AbaE3acDfE0993C8b66A4A83A9cdd975f2a7064", "0xD947ca6D1d833084e3f66D45d6B5424631a3d83a", "0xE7ECA4235937cFDD45D53c897C96252C256fe76C", "0x76e0F6f59922d9c5b9c7c2e1D75ED3ADE0D2eacA", "0x94FBA016e8353a910cDa9f524CcbFFad4dDd016B", "0x81FcE74B542BC194cc838208b94C0De2Ea89C9eD", "0x81669612E0baeA434A08e805B3A2ef420554f67b", "0x6486B7eBc74B804db3553B1342bF27Fa220e99dc", "0xA8368244f0e2809E65fFe4558740972d7A10094E", "0xDE12fA940335A2AAA105eF93973A28a525c9185c", "0x29a84D8c09BC91E499c86cAA52d2af12a1Ec9b2f", "0xF39F3a6eF8b1B5513C5C35B71Cccd8bdB38D6bf7", "0x0a52421DcAE6D3eAFd430a18deACf8b9a67A6Fd7", "0x470bFEcD22F9387CB6674AeFB639b03978261190", "0xF3b82A7b9791b5C62e34f12d7013289859Af3bb6", "0xA6B24E31Fc273061CDDc241F925DFbB1D7902AE9", "0xbc61f396Ccf6c57D5F38Fb19B4730dE77D878002", "0xb126ef6751D9BC4BdCA7c4aB9BaB3cB280c72009", "0x29A83bc1159aDDAF541827aAAD3Ff28f4ef905b5", "0xb408D4d82f6054a3Bc7ED789A95B8A881f8439eB", "0x9B37470aDa9a015a820607cC9A47bfE4e6E64061", "0x8C0aD06B88ED5e4aE62512F99aCf5b1f1B8621BD", "0x34f1280F9D8EA81649502fbe807BFC28197E9fC3", "0x11aA4c881DfFe15B3A766c7e897edef759ffb9f6", "0x5D335Eb59c9c00EfFBE1477644bE99805b97c255", "0x090aC1Bf2dB0f38C27B7fF0399DDd77950DA7d0E", "0x34116657AD6B4F119bB94264418aeff8a9246Fd5", "0x337EB17683563147f4c5614FB6B21fBD3DE751Af", "0x1212a47f5aC54F441f553282dD1FdF91fF25A986", "0x9EE68520033b333A967D9E7C11bF9B4410A63f54", "0x01713003e9F5EcD48e5F1029Bd42ED6157669f1C", "0xE7b0A9DF0B5Fc429E013AAF69ee690bB9f9EEd8d", "0xc72eD62cB9083FbC089828c2B74686B22146844C", "0xEED3426075C27742168A879f5614c77a220adaab", "0x2139697d550C97C839654668fFAE5e3B849864DB", "0x29043B7d1f51B5968f0D4a3a699Bb441a66a4fFE", "0x0a4480909551f8092c1EedCadb839eE917bA9973", "0x4f2d9027b00773D7739Ac648CA8A834C4F851768", "0x247C8CD0f8967F2442aF50Ad5f2011d32778E79F", "0x348be4dB0E2A42A599C7f9E954A97c8B7AbB4f9e", "0x72c99399C46a499C572385410155516677e9DFA6", "0x92617E7E4b3c61B38750074c11C0a8cdfeAE34CD", "0xD57A458039B7Ef0a90ca839F89824eA2bc86F2Ae", "0x8b61813a6eE3b5d42384A4cb0A6b595eae51d844", "0x8f4768cDaEE5F93DB26b6F18c2e4967e34858fF8", "0xdb32e6821E1Faa131Fc1dE792AdfB584AdEb0c27", "0x7ab4b6B4c2679E4e6d01bF80B61972570550768a", "0xb36009A616C63b39e9D867Cbb54B46Ed503Edf61", "0xd46802ef6398204B81d2081bDD5bD32ff07DDCd2", "0xd237186dD1fccBd8BAf508dcAB2D06B45114bDbB", "0x472523616716e19F63BFB277cbaA6D37E8F5180E", "0xA57f258E394Ef84c82be85A184ec0843cacE9c97", "0x62A061a3D87628608d04FFa4a529F97C94A06F05", "0xB6165Fc9AFEe7988aDB7BCE5B1E39674eC6D3326", "0xB1BfF0aE11E80D265368E1F70E4Ca5bf79eb4Ab3", "0x35B240d9b85A74981b9440b0EA9184E2e8b34dd2", "0x7764C5ED9a2B5574CEAD13220C227753Ed721740", "0x312F6042b7284512C27466Fb540a7E51955e8a83", "0x4E15AAe4A20250BA1a197125D10AD0F241438D9C", "0xe37E21E513895F2D98C2799F561d2dB56859eAC6", "0x0b74db331Bc0A9847D5E455FEC91852DC91b8C74", "0x4Bf2323d55a22e2f4e4753FB1eC2a8037cd99739", "0x185A06D046e070ef42F9b54E82456F41660CC6CF", "0xE651B346c4E6e47C8B8523ee9D2f6a377b9dBCf0", "0xd813632235bAeD24f55f3f2eb8a54Ac3b1937FBf", "0x3b026897e1c42927A9e8FA442335b77eac39E5eD", "0xdB8d4f6E5b5e6DC1945ecA39948D0EB29ff98ce4", "0xaaC7f62f7D137F712dfE6e22Fb75C747cCe2279d", "0xA797a967b8B77e89a2457a4Fa4329E1C2c3FCEf8", "0x817336FD8c36C4B5ed5c4f044aa33be600A8Bd6e", "0x02311701bcAa2aFff1935757Fb93eE9aD332B073", "0x50a2a69CaDd156563337C0159bA9e5541ADc27a5", "0xE4e013c3ff7Ff494F4905040F120DD2866e32147" ]
        const values = [ ]
        for (let i = 0; i < wallets.length; i++) {
            values.push(1)
        }
        await sendAndWaitForReceipt(async () => {
            return await disperse.disperseEther(wallets, values, {value: wallets.length+1})
        });
    })

    // from 0xadde91e7ab72b3e74bad538149cd5f0b7d7dbbbd45c4e9b4bcca1a0b878a6b92
    it("should generate wallets and send", async function() {
        // lazy way to produce same length because i didn't count
        const targets = []
        const count = 100;
        for (let i = 0; i < count; i++) {
            const w = generateWallet()
            targets.push(await w.getAddress())
        }
        const values = [ ]
        for (let i = 0; i <count; i++) {
            values.push(1)
        }
        await sendAndWaitForReceipt(async () => {
            return  await disperse.disperseEther(targets, values, {value: count+1})
        });
    })
})