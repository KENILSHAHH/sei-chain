// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: oracle/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryExchangeRateRequest is the request type for the Query/ExchangeRate RPC method.
type QueryExchangeRateRequest struct {
	// denom defines the denomination to query for.
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QueryExchangeRateRequest) Reset()         { *m = QueryExchangeRateRequest{} }
func (m *QueryExchangeRateRequest) String() string { return proto.CompactTextString(m) }
func (*QueryExchangeRateRequest) ProtoMessage()    {}
func (*QueryExchangeRateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_562b782cb9ac197e, []int{0}
}
func (m *QueryExchangeRateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExchangeRateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExchangeRateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExchangeRateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExchangeRateRequest.Merge(m, src)
}
func (m *QueryExchangeRateRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryExchangeRateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExchangeRateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExchangeRateRequest proto.InternalMessageInfo

// QueryExchangeRateResponse is response type for the
// Query/ExchangeRate RPC method.
type QueryExchangeRateResponse struct {
	// exchange_rate defines the exchange rate of Sei denominated in various Sei
	OracleExchangeRate OracleExchangeRate `protobuf:"bytes,1,opt,name=oracle_exchange_rate,json=oracleExchangeRate,proto3" json:"oracle_exchange_rate"`
}

func (m *QueryExchangeRateResponse) Reset()         { *m = QueryExchangeRateResponse{} }
func (m *QueryExchangeRateResponse) String() string { return proto.CompactTextString(m) }
func (*QueryExchangeRateResponse) ProtoMessage()    {}
func (*QueryExchangeRateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_562b782cb9ac197e, []int{1}
}
func (m *QueryExchangeRateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExchangeRateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExchangeRateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExchangeRateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExchangeRateResponse.Merge(m, src)
}
func (m *QueryExchangeRateResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryExchangeRateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExchangeRateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExchangeRateResponse proto.InternalMessageInfo

func (m *QueryExchangeRateResponse) GetOracleExchangeRate() OracleExchangeRate {
	if m != nil {
		return m.OracleExchangeRate
	}
	return OracleExchangeRate{}
}

// QueryExchangeRatesRequest is the request type for the Query/ExchangeRates RPC method.
type QueryExchangeRatesRequest struct {
}

func (m *QueryExchangeRatesRequest) Reset()         { *m = QueryExchangeRatesRequest{} }
func (m *QueryExchangeRatesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryExchangeRatesRequest) ProtoMessage()    {}
func (*QueryExchangeRatesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_562b782cb9ac197e, []int{2}
}
func (m *QueryExchangeRatesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExchangeRatesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExchangeRatesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExchangeRatesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExchangeRatesRequest.Merge(m, src)
}
func (m *QueryExchangeRatesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryExchangeRatesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExchangeRatesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExchangeRatesRequest proto.InternalMessageInfo

type DenomOracleExchangeRatePair struct {
	Denom              string             `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	OracleExchangeRate OracleExchangeRate `protobuf:"bytes,2,opt,name=oracle_exchange_rate,json=oracleExchangeRate,proto3" json:"oracle_exchange_rate"`
}

func (m *DenomOracleExchangeRatePair) Reset()         { *m = DenomOracleExchangeRatePair{} }
func (m *DenomOracleExchangeRatePair) String() string { return proto.CompactTextString(m) }
func (*DenomOracleExchangeRatePair) ProtoMessage()    {}
func (*DenomOracleExchangeRatePair) Descriptor() ([]byte, []int) {
	return fileDescriptor_562b782cb9ac197e, []int{3}
}
func (m *DenomOracleExchangeRatePair) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DenomOracleExchangeRatePair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DenomOracleExchangeRatePair.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DenomOracleExchangeRatePair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DenomOracleExchangeRatePair.Merge(m, src)
}
func (m *DenomOracleExchangeRatePair) XXX_Size() int {
	return m.Size()
}
func (m *DenomOracleExchangeRatePair) XXX_DiscardUnknown() {
	xxx_messageInfo_DenomOracleExchangeRatePair.DiscardUnknown(m)
}

var xxx_messageInfo_DenomOracleExchangeRatePair proto.InternalMessageInfo

func (m *DenomOracleExchangeRatePair) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *DenomOracleExchangeRatePair) GetOracleExchangeRate() OracleExchangeRate {
	if m != nil {
		return m.OracleExchangeRate
	}
	return OracleExchangeRate{}
}

// QueryExchangeRatesResponse is response type for the
// Query/ExchangeRates RPC method.
type QueryExchangeRatesResponse struct {
	// exchange_rates defines a list of the exchange rate for all whitelisted denoms.
	DenomOracleExchangeRatePairs DenomOracleExchangeRatePairs `protobuf:"bytes,1,rep,name=denom_oracle_exchange_rate_pairs,json=denomOracleExchangeRatePairs,proto3,castrepeated=DenomOracleExchangeRatePairs" json:"denom_oracle_exchange_rate_pairs"`
}

func (m *QueryExchangeRatesResponse) Reset()         { *m = QueryExchangeRatesResponse{} }
func (m *QueryExchangeRatesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryExchangeRatesResponse) ProtoMessage()    {}
func (*QueryExchangeRatesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_562b782cb9ac197e, []int{4}
}
func (m *QueryExchangeRatesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExchangeRatesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExchangeRatesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExchangeRatesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExchangeRatesResponse.Merge(m, src)
}
func (m *QueryExchangeRatesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryExchangeRatesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExchangeRatesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExchangeRatesResponse proto.InternalMessageInfo

func (m *QueryExchangeRatesResponse) GetDenomOracleExchangeRatePairs() DenomOracleExchangeRatePairs {
	if m != nil {
		return m.DenomOracleExchangeRatePairs
	}
	return nil
}

// QueryActivesRequest is the request type for the Query/Actives RPC method.
type QueryActivesRequest struct {
}

func (m *QueryActivesRequest) Reset()         { *m = QueryActivesRequest{} }
func (m *QueryActivesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryActivesRequest) ProtoMessage()    {}
func (*QueryActivesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_562b782cb9ac197e, []int{5}
}
func (m *QueryActivesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryActivesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryActivesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryActivesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryActivesRequest.Merge(m, src)
}
func (m *QueryActivesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryActivesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryActivesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryActivesRequest proto.InternalMessageInfo

// QueryActivesResponse is response type for the
// Query/Actives RPC method.
type QueryActivesResponse struct {
	// actives defines a list of the denomination which oracle prices aggreed upon.
	Actives []string `protobuf:"bytes,1,rep,name=actives,proto3" json:"actives,omitempty"`
}

func (m *QueryActivesResponse) Reset()         { *m = QueryActivesResponse{} }
func (m *QueryActivesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryActivesResponse) ProtoMessage()    {}
func (*QueryActivesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_562b782cb9ac197e, []int{6}
}
func (m *QueryActivesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryActivesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryActivesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryActivesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryActivesResponse.Merge(m, src)
}
func (m *QueryActivesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryActivesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryActivesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryActivesResponse proto.InternalMessageInfo

func (m *QueryActivesResponse) GetActives() []string {
	if m != nil {
		return m.Actives
	}
	return nil
}

// QueryVoteTargetsRequest is the request type for the Query/VoteTargets RPC method.
type QueryVoteTargetsRequest struct {
}

func (m *QueryVoteTargetsRequest) Reset()         { *m = QueryVoteTargetsRequest{} }
func (m *QueryVoteTargetsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryVoteTargetsRequest) ProtoMessage()    {}
func (*QueryVoteTargetsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_562b782cb9ac197e, []int{7}
}
func (m *QueryVoteTargetsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVoteTargetsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVoteTargetsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVoteTargetsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVoteTargetsRequest.Merge(m, src)
}
func (m *QueryVoteTargetsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryVoteTargetsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVoteTargetsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVoteTargetsRequest proto.InternalMessageInfo

// QueryVoteTargetsResponse is response type for the
// Query/VoteTargets RPC method.
type QueryVoteTargetsResponse struct {
	// vote_targets defines a list of the denomination in which everyone
	// should vote in the current vote period.
	VoteTargets []string `protobuf:"bytes,1,rep,name=vote_targets,json=voteTargets,proto3" json:"vote_targets,omitempty"`
}

func (m *QueryVoteTargetsResponse) Reset()         { *m = QueryVoteTargetsResponse{} }
func (m *QueryVoteTargetsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryVoteTargetsResponse) ProtoMessage()    {}
func (*QueryVoteTargetsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_562b782cb9ac197e, []int{8}
}
func (m *QueryVoteTargetsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVoteTargetsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVoteTargetsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVoteTargetsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVoteTargetsResponse.Merge(m, src)
}
func (m *QueryVoteTargetsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryVoteTargetsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVoteTargetsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVoteTargetsResponse proto.InternalMessageInfo

func (m *QueryVoteTargetsResponse) GetVoteTargets() []string {
	if m != nil {
		return m.VoteTargets
	}
	return nil
}

// request type for price snapshot history RPC method
type QueryPriceSnapshotHistoryRequest struct {
}

func (m *QueryPriceSnapshotHistoryRequest) Reset()         { *m = QueryPriceSnapshotHistoryRequest{} }
func (m *QueryPriceSnapshotHistoryRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPriceSnapshotHistoryRequest) ProtoMessage()    {}
func (*QueryPriceSnapshotHistoryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_562b782cb9ac197e, []int{9}
}
func (m *QueryPriceSnapshotHistoryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPriceSnapshotHistoryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPriceSnapshotHistoryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPriceSnapshotHistoryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPriceSnapshotHistoryRequest.Merge(m, src)
}
func (m *QueryPriceSnapshotHistoryRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPriceSnapshotHistoryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPriceSnapshotHistoryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPriceSnapshotHistoryRequest proto.InternalMessageInfo

type QueryPriceSnapshotHistoryResponse struct {
	PriceSnapshots PriceSnapshots `protobuf:"bytes,1,rep,name=price_snapshots,json=priceSnapshots,proto3,castrepeated=PriceSnapshots" json:"price_snapshots"`
}

func (m *QueryPriceSnapshotHistoryResponse) Reset()         { *m = QueryPriceSnapshotHistoryResponse{} }
func (m *QueryPriceSnapshotHistoryResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPriceSnapshotHistoryResponse) ProtoMessage()    {}
func (*QueryPriceSnapshotHistoryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_562b782cb9ac197e, []int{10}
}
func (m *QueryPriceSnapshotHistoryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPriceSnapshotHistoryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPriceSnapshotHistoryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPriceSnapshotHistoryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPriceSnapshotHistoryResponse.Merge(m, src)
}
func (m *QueryPriceSnapshotHistoryResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPriceSnapshotHistoryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPriceSnapshotHistoryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPriceSnapshotHistoryResponse proto.InternalMessageInfo

func (m *QueryPriceSnapshotHistoryResponse) GetPriceSnapshots() PriceSnapshots {
	if m != nil {
		return m.PriceSnapshots
	}
	return nil
}

// request type for twap RPC method
type QueryTwapsRequest struct {
	LookbackSeconds uint64 `protobuf:"varint,1,opt,name=lookback_seconds,json=lookbackSeconds,proto3" json:"lookback_seconds,omitempty"`
}

func (m *QueryTwapsRequest) Reset()         { *m = QueryTwapsRequest{} }
func (m *QueryTwapsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTwapsRequest) ProtoMessage()    {}
func (*QueryTwapsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_562b782cb9ac197e, []int{11}
}
func (m *QueryTwapsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTwapsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTwapsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTwapsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTwapsRequest.Merge(m, src)
}
func (m *QueryTwapsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTwapsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTwapsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTwapsRequest proto.InternalMessageInfo

func (m *QueryTwapsRequest) GetLookbackSeconds() uint64 {
	if m != nil {
		return m.LookbackSeconds
	}
	return 0
}

type QueryTwapsResponse struct {
	OracleTwaps OracleTwaps `protobuf:"bytes,1,rep,name=oracle_twaps,json=oracleTwaps,proto3,castrepeated=OracleTwaps" json:"oracle_twaps"`
}

func (m *QueryTwapsResponse) Reset()         { *m = QueryTwapsResponse{} }
func (m *QueryTwapsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTwapsResponse) ProtoMessage()    {}
func (*QueryTwapsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_562b782cb9ac197e, []int{12}
}
func (m *QueryTwapsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTwapsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTwapsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTwapsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTwapsResponse.Merge(m, src)
}
func (m *QueryTwapsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTwapsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTwapsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTwapsResponse proto.InternalMessageInfo

func (m *QueryTwapsResponse) GetOracleTwaps() OracleTwaps {
	if m != nil {
		return m.OracleTwaps
	}
	return nil
}

// QueryFeederDelegationRequest is the request type for the Query/FeederDelegation RPC method.
type QueryFeederDelegationRequest struct {
	// validator defines the validator address to query for.
	ValidatorAddr string `protobuf:"bytes,1,opt,name=validator_addr,json=validatorAddr,proto3" json:"validator_addr,omitempty"`
}

func (m *QueryFeederDelegationRequest) Reset()         { *m = QueryFeederDelegationRequest{} }
func (m *QueryFeederDelegationRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFeederDelegationRequest) ProtoMessage()    {}
func (*QueryFeederDelegationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_562b782cb9ac197e, []int{13}
}
func (m *QueryFeederDelegationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFeederDelegationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFeederDelegationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFeederDelegationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFeederDelegationRequest.Merge(m, src)
}
func (m *QueryFeederDelegationRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFeederDelegationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFeederDelegationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFeederDelegationRequest proto.InternalMessageInfo

// QueryFeederDelegationResponse is response type for the
// Query/FeederDelegation RPC method.
type QueryFeederDelegationResponse struct {
	// feeder_addr defines the feeder delegation of a validator
	FeederAddr string `protobuf:"bytes,1,opt,name=feeder_addr,json=feederAddr,proto3" json:"feeder_addr,omitempty"`
}

func (m *QueryFeederDelegationResponse) Reset()         { *m = QueryFeederDelegationResponse{} }
func (m *QueryFeederDelegationResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFeederDelegationResponse) ProtoMessage()    {}
func (*QueryFeederDelegationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_562b782cb9ac197e, []int{14}
}
func (m *QueryFeederDelegationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFeederDelegationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFeederDelegationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFeederDelegationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFeederDelegationResponse.Merge(m, src)
}
func (m *QueryFeederDelegationResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFeederDelegationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFeederDelegationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFeederDelegationResponse proto.InternalMessageInfo

func (m *QueryFeederDelegationResponse) GetFeederAddr() string {
	if m != nil {
		return m.FeederAddr
	}
	return ""
}

// QueryVotePenaltyCounterRequest is the request type for the Query/MissCounter RPC method.
type QueryVotePenaltyCounterRequest struct {
	// validator defines the validator address to query for.
	ValidatorAddr string `protobuf:"bytes,1,opt,name=validator_addr,json=validatorAddr,proto3" json:"validator_addr,omitempty"`
}

func (m *QueryVotePenaltyCounterRequest) Reset()         { *m = QueryVotePenaltyCounterRequest{} }
func (m *QueryVotePenaltyCounterRequest) String() string { return proto.CompactTextString(m) }
func (*QueryVotePenaltyCounterRequest) ProtoMessage()    {}
func (*QueryVotePenaltyCounterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_562b782cb9ac197e, []int{15}
}
func (m *QueryVotePenaltyCounterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVotePenaltyCounterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVotePenaltyCounterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVotePenaltyCounterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVotePenaltyCounterRequest.Merge(m, src)
}
func (m *QueryVotePenaltyCounterRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryVotePenaltyCounterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVotePenaltyCounterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVotePenaltyCounterRequest proto.InternalMessageInfo

// QueryVotePenaltyCounterResponse is response type for the
// Query/VotePenaltyCounter RPC method.
type QueryVotePenaltyCounterResponse struct {
	VotePenaltyCounter *VotePenaltyCounter `protobuf:"bytes,1,opt,name=vote_penalty_counter,json=votePenaltyCounter,proto3" json:"vote_penalty_counter,omitempty"`
}

func (m *QueryVotePenaltyCounterResponse) Reset()         { *m = QueryVotePenaltyCounterResponse{} }
func (m *QueryVotePenaltyCounterResponse) String() string { return proto.CompactTextString(m) }
func (*QueryVotePenaltyCounterResponse) ProtoMessage()    {}
func (*QueryVotePenaltyCounterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_562b782cb9ac197e, []int{16}
}
func (m *QueryVotePenaltyCounterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVotePenaltyCounterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVotePenaltyCounterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVotePenaltyCounterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVotePenaltyCounterResponse.Merge(m, src)
}
func (m *QueryVotePenaltyCounterResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryVotePenaltyCounterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVotePenaltyCounterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVotePenaltyCounterResponse proto.InternalMessageInfo

func (m *QueryVotePenaltyCounterResponse) GetVotePenaltyCounter() *VotePenaltyCounter {
	if m != nil {
		return m.VotePenaltyCounter
	}
	return nil
}

// QuerySlashWindow is the request type for the
// Query/SlashWindow RPC method.
type QuerySlashWindowRequest struct {
}

func (m *QuerySlashWindowRequest) Reset()         { *m = QuerySlashWindowRequest{} }
func (m *QuerySlashWindowRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySlashWindowRequest) ProtoMessage()    {}
func (*QuerySlashWindowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_562b782cb9ac197e, []int{17}
}
func (m *QuerySlashWindowRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySlashWindowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySlashWindowRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySlashWindowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySlashWindowRequest.Merge(m, src)
}
func (m *QuerySlashWindowRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySlashWindowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySlashWindowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySlashWindowRequest proto.InternalMessageInfo

// QuerySlashWindowResponse is response type for the
// Query/SlashWindow RPC method.
type QuerySlashWindowResponse struct {
	// window_progress defines the number of voting periods
	// since the last slashing event would have taken place.
	WindowProgress uint64 `protobuf:"varint,1,opt,name=window_progress,json=windowProgress,proto3" json:"window_progress,omitempty"`
}

func (m *QuerySlashWindowResponse) Reset()         { *m = QuerySlashWindowResponse{} }
func (m *QuerySlashWindowResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySlashWindowResponse) ProtoMessage()    {}
func (*QuerySlashWindowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_562b782cb9ac197e, []int{18}
}
func (m *QuerySlashWindowResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySlashWindowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySlashWindowResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySlashWindowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySlashWindowResponse.Merge(m, src)
}
func (m *QuerySlashWindowResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySlashWindowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySlashWindowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySlashWindowResponse proto.InternalMessageInfo

func (m *QuerySlashWindowResponse) GetWindowProgress() uint64 {
	if m != nil {
		return m.WindowProgress
	}
	return 0
}

// QueryParamsRequest is the request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_562b782cb9ac197e, []int{19}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is the response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params defines the parameters of the module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_562b782cb9ac197e, []int{20}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func init() {
	proto.RegisterType((*QueryExchangeRateRequest)(nil), "seiprotocol.seichain.oracle.QueryExchangeRateRequest")
	proto.RegisterType((*QueryExchangeRateResponse)(nil), "seiprotocol.seichain.oracle.QueryExchangeRateResponse")
	proto.RegisterType((*QueryExchangeRatesRequest)(nil), "seiprotocol.seichain.oracle.QueryExchangeRatesRequest")
	proto.RegisterType((*DenomOracleExchangeRatePair)(nil), "seiprotocol.seichain.oracle.DenomOracleExchangeRatePair")
	proto.RegisterType((*QueryExchangeRatesResponse)(nil), "seiprotocol.seichain.oracle.QueryExchangeRatesResponse")
	proto.RegisterType((*QueryActivesRequest)(nil), "seiprotocol.seichain.oracle.QueryActivesRequest")
	proto.RegisterType((*QueryActivesResponse)(nil), "seiprotocol.seichain.oracle.QueryActivesResponse")
	proto.RegisterType((*QueryVoteTargetsRequest)(nil), "seiprotocol.seichain.oracle.QueryVoteTargetsRequest")
	proto.RegisterType((*QueryVoteTargetsResponse)(nil), "seiprotocol.seichain.oracle.QueryVoteTargetsResponse")
	proto.RegisterType((*QueryPriceSnapshotHistoryRequest)(nil), "seiprotocol.seichain.oracle.QueryPriceSnapshotHistoryRequest")
	proto.RegisterType((*QueryPriceSnapshotHistoryResponse)(nil), "seiprotocol.seichain.oracle.QueryPriceSnapshotHistoryResponse")
	proto.RegisterType((*QueryTwapsRequest)(nil), "seiprotocol.seichain.oracle.QueryTwapsRequest")
	proto.RegisterType((*QueryTwapsResponse)(nil), "seiprotocol.seichain.oracle.QueryTwapsResponse")
	proto.RegisterType((*QueryFeederDelegationRequest)(nil), "seiprotocol.seichain.oracle.QueryFeederDelegationRequest")
	proto.RegisterType((*QueryFeederDelegationResponse)(nil), "seiprotocol.seichain.oracle.QueryFeederDelegationResponse")
	proto.RegisterType((*QueryVotePenaltyCounterRequest)(nil), "seiprotocol.seichain.oracle.QueryVotePenaltyCounterRequest")
	proto.RegisterType((*QueryVotePenaltyCounterResponse)(nil), "seiprotocol.seichain.oracle.QueryVotePenaltyCounterResponse")
	proto.RegisterType((*QuerySlashWindowRequest)(nil), "seiprotocol.seichain.oracle.QuerySlashWindowRequest")
	proto.RegisterType((*QuerySlashWindowResponse)(nil), "seiprotocol.seichain.oracle.QuerySlashWindowResponse")
	proto.RegisterType((*QueryParamsRequest)(nil), "seiprotocol.seichain.oracle.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "seiprotocol.seichain.oracle.QueryParamsResponse")
}

func init() { proto.RegisterFile("oracle/query.proto", fileDescriptor_562b782cb9ac197e) }

var fileDescriptor_562b782cb9ac197e = []byte{
	// 1338 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x97, 0xcf, 0x6f, 0xd4, 0x46,
	0x14, 0xc7, 0x33, 0x94, 0x1f, 0xe5, 0x2d, 0x04, 0x78, 0x6c, 0x21, 0x38, 0xc9, 0x6e, 0x30, 0x3f,
	0x4b, 0x61, 0x1d, 0x42, 0xa0, 0xfc, 0x4a, 0x20, 0x81, 0xd2, 0x1f, 0xaa, 0x44, 0x58, 0x50, 0x5b,
	0x71, 0xb1, 0x86, 0xf5, 0x74, 0xd7, 0x62, 0xf1, 0x18, 0x8f, 0xb3, 0x10, 0x21, 0x2e, 0x15, 0x07,
	0x4e, 0x15, 0x12, 0xea, 0xad, 0x52, 0x39, 0xa1, 0xaa, 0x87, 0x1e, 0xda, 0x73, 0x7b, 0xa2, 0x12,
	0x52, 0x7b, 0x40, 0xea, 0x85, 0x53, 0x5b, 0x85, 0x1e, 0xda, 0x7f, 0xa0, 0xe7, 0xca, 0xe3, 0xf1,
	0xc6, 0x4e, 0xbc, 0x5e, 0x6f, 0x5a, 0x11, 0x4e, 0xbb, 0x7e, 0xe3, 0xf7, 0xe6, 0xf3, 0x7d, 0x6f,
	0x3c, 0xf3, 0x06, 0x90, 0x7b, 0xb4, 0xd6, 0x64, 0xc6, 0xcd, 0x59, 0xe6, 0xcd, 0x55, 0x5c, 0x8f,
	0xfb, 0x1c, 0x07, 0x05, 0xb3, 0xe5, 0xbf, 0x1a, 0x6f, 0x56, 0x04, 0xb3, 0x6b, 0x0d, 0x6a, 0x3b,
	0x95, 0xf0, 0x45, 0xad, 0x58, 0xe7, 0x75, 0x2e, 0x47, 0x8d, 0xe0, 0x5f, 0xe8, 0xa2, 0x0d, 0xd5,
	0x39, 0xaf, 0x37, 0x99, 0x41, 0x5d, 0xdb, 0xa0, 0x8e, 0xc3, 0x7d, 0xea, 0xdb, 0xdc, 0x11, 0x6a,
	0x74, 0xab, 0x9a, 0x24, 0xfc, 0x09, 0x8d, 0xfa, 0x49, 0x18, 0xb8, 0x14, 0x4c, 0xfa, 0xce, 0xed,
	0x5a, 0x83, 0x3a, 0x75, 0x56, 0xa5, 0x3e, 0xab, 0xb2, 0x9b, 0xb3, 0x4c, 0xf8, 0x58, 0x84, 0x35,
	0x16, 0x73, 0xf8, 0x8d, 0x01, 0x32, 0x42, 0xf6, 0xaf, 0xaf, 0x86, 0x0f, 0x27, 0x5f, 0xbf, 0xff,
	0xa8, 0xdc, 0xf7, 0xd7, 0xa3, 0x72, 0x9f, 0x7e, 0x8f, 0xc0, 0x8e, 0x14, 0x67, 0xe1, 0x72, 0x47,
	0x30, 0xac, 0x43, 0x31, 0x9c, 0xc9, 0x64, 0x6a, 0xd8, 0xf4, 0xa8, 0xcf, 0x64, 0xb0, 0xc2, 0x98,
	0x51, 0xc9, 0x90, 0x57, 0xb9, 0x28, 0x7f, 0xe2, 0x61, 0xa7, 0x57, 0x3f, 0xfd, 0xad, 0xdc, 0x57,
	0x55, 0x89, 0x8a, 0x8f, 0xe8, 0x83, 0x29, 0x14, 0x42, 0x69, 0xd0, 0xbf, 0x24, 0x30, 0x78, 0x3e,
	0xe0, 0x5e, 0x1a, 0x72, 0x86, 0xda, 0x5e, 0xba, 0xc6, 0x8e, 0xec, 0xab, 0xfe, 0x6f, 0xf6, 0x9f,
	0x08, 0x68, 0x69, 0xf0, 0x2a, 0x87, 0x8f, 0x09, 0x8c, 0x48, 0x22, 0x33, 0x0d, 0xc7, 0x74, 0xa9,
	0xed, 0x89, 0x01, 0x32, 0xf2, 0xda, 0xfe, 0xc2, 0xd8, 0xf1, 0x4c, 0xa8, 0x8c, 0x14, 0x4c, 0xef,
	0x0e, 0xe8, 0xbe, 0xf9, 0xbd, 0x3c, 0x94, 0xf1, 0x92, 0xa8, 0x0e, 0x59, 0x19, 0xa3, 0xfa, 0x1b,
	0xb0, 0x55, 0xca, 0x98, 0xaa, 0xf9, 0x76, 0x6b, 0x21, 0xfb, 0xa3, 0x50, 0x4c, 0x9a, 0x95, 0xae,
	0x01, 0x58, 0x47, 0x43, 0x93, 0xa4, 0x5f, 0x5f, 0x8d, 0x1e, 0xf5, 0x1d, 0xb0, 0x5d, 0x7a, 0x7c,
	0xc4, 0x7d, 0x76, 0x85, 0x7a, 0x75, 0xe6, 0xb7, 0x83, 0x4d, 0xa8, 0xa5, 0x9a, 0x18, 0x52, 0x01,
	0x77, 0xc2, 0x86, 0x16, 0xf7, 0x99, 0xe9, 0x87, 0x76, 0x15, 0xb5, 0xd0, 0x5a, 0x78, 0x55, 0xd7,
	0x61, 0x44, 0xba, 0xcf, 0x78, 0x76, 0x8d, 0x5d, 0x76, 0xa8, 0x2b, 0x1a, 0xdc, 0x7f, 0xcf, 0x16,
	0x3e, 0xf7, 0xe6, 0xa2, 0x29, 0x1e, 0x10, 0xd8, 0x99, 0xf1, 0x92, 0x9a, 0xec, 0x3a, 0x6c, 0x72,
	0x83, 0x71, 0x53, 0xa8, 0x17, 0xa2, 0x1a, 0x1c, 0xc8, 0xac, 0x41, 0x22, 0xe6, 0xf4, 0x36, 0x95,
	0xf5, 0xfe, 0x84, 0x59, 0x54, 0xfb, 0xdd, 0xc4, 0xb3, 0x3e, 0x09, 0x5b, 0x24, 0xd1, 0x95, 0x5b,
	0xd4, 0x8d, 0x52, 0x81, 0x6f, 0xc2, 0xe6, 0x26, 0xe7, 0xd7, 0xaf, 0xd1, 0xda, 0x75, 0x53, 0xb0,
	0x1a, 0x77, 0x2c, 0x21, 0x17, 0xf0, 0xea, 0xea, 0xa6, 0xc8, 0x7e, 0x39, 0x34, 0xeb, 0xb3, 0x80,
	0x71, 0x7f, 0x25, 0xc1, 0x84, 0x0d, 0x6a, 0x45, 0xf9, 0x81, 0x5d, 0xf1, 0xef, 0xcb, 0xb1, 0xb0,
	0x83, 0x38, 0xd3, 0x5b, 0x15, 0x7c, 0x61, 0xc1, 0x26, 0xaa, 0x05, 0xbe, 0xf0, 0xa0, 0x5f, 0x84,
	0x21, 0x39, 0xed, 0x05, 0xc6, 0x2c, 0xe6, 0x9d, 0x67, 0x4d, 0x56, 0x97, 0x9b, 0x51, 0xa4, 0x60,
	0x0f, 0xf4, 0xb7, 0x68, 0xd3, 0xb6, 0xa8, 0xcf, 0x3d, 0x93, 0x5a, 0x96, 0xa7, 0x3e, 0xc0, 0x8d,
	0x6d, 0xeb, 0x94, 0x65, 0x79, 0xb1, 0xcd, 0xe6, 0x2c, 0x0c, 0x77, 0x08, 0xa8, 0x24, 0x95, 0xa1,
	0xf0, 0xa9, 0x1c, 0x8b, 0x87, 0x83, 0xd0, 0x14, 0xc4, 0xd2, 0x2f, 0x41, 0xa9, 0xbd, 0x7e, 0x66,
	0x98, 0x43, 0x9b, 0xfe, 0xdc, 0x39, 0x3e, 0xeb, 0xf8, 0xcc, 0x5b, 0x36, 0xd4, 0x3d, 0x02, 0xe5,
	0x8e, 0x31, 0x15, 0x17, 0x85, 0xa2, 0x5c, 0x9a, 0x6e, 0x38, 0x6c, 0xd6, 0xc2, 0xf1, 0x5c, 0xfb,
	0x60, 0x4a, 0x58, 0x6c, 0x2d, 0xb1, 0xb5, 0x3f, 0x9a, 0xcb, 0x4d, 0x2a, 0x1a, 0x1f, 0xdb, 0x8e,
	0xc5, 0x6f, 0x45, 0x2b, 0xfa, 0x9c, 0xfa, 0x68, 0x12, 0x43, 0x8a, 0x6c, 0x1f, 0x6c, 0xba, 0x25,
	0x2d, 0xa6, 0xeb, 0xf1, 0xba, 0xc7, 0x44, 0xb4, 0x88, 0xfa, 0x43, 0xf3, 0x8c, 0xb2, 0xea, 0x45,
	0xb5, 0x86, 0x66, 0xa8, 0x47, 0x6f, 0xb4, 0xbf, 0xc7, 0x4f, 0xd4, 0x37, 0x1f, 0x59, 0x55, 0xd4,
	0x29, 0x58, 0xeb, 0x4a, 0x8b, 0x52, 0xb8, 0x2b, 0xfb, 0xa3, 0x90, 0xaf, 0xaa, 0x1d, 0x52, 0x39,
	0x8e, 0x7d, 0x5e, 0x82, 0x35, 0x32, 0x34, 0x3e, 0x23, 0xb0, 0xdd, 0x62, 0xae, 0xc7, 0x6a, 0xd4,
	0x67, 0x96, 0x19, 0xdf, 0x78, 0xf0, 0x68, 0x66, 0xe0, 0x4e, 0xa7, 0x9a, 0x76, 0xac, 0x57, 0xb7,
	0x50, 0x97, 0x7e, 0xe1, 0xb3, 0x5f, 0xff, 0x7c, 0xb8, 0x6a, 0x02, 0x4f, 0x19, 0x82, 0xd9, 0x87,
	0xa2, 0x00, 0xf2, 0x41, 0x46, 0x50, 0xe7, 0xaa, 0x21, 0xf7, 0x49, 0x61, 0xdc, 0x91, 0xbf, 0x77,
	0x8d, 0xc4, 0x8e, 0x7d, 0x7f, 0x15, 0xc1, 0xef, 0x08, 0x6c, 0x58, 0x49, 0x1d, 0x47, 0xa4, 0x8e,
	0x43, 0xf8, 0x56, 0x80, 0x1e, 0x41, 0xb7, 0x0e, 0x67, 0x72, 0xe3, 0x2f, 0x04, 0x06, 0x3a, 0xd4,
	0x41, 0x60, 0x8f, 0x24, 0xd1, 0x02, 0xd2, 0xde, 0xee, 0xd9, 0x4f, 0x49, 0x38, 0x23, 0x25, 0x1c,
	0xc3, 0xf1, 0x7c, 0xa5, 0x48, 0x48, 0x11, 0x41, 0x0d, 0xbe, 0x25, 0xb0, 0x71, 0x85, 0x35, 0x1c,
	0x94, 0x1a, 0xf6, 0xe2, 0xee, 0xf4, 0x32, 0x24, 0x99, 0xf1, 0x7b, 0x02, 0x18, 0xcb, 0xbf, 0x3a,
	0x4f, 0x71, 0xb4, 0xfb, 0xec, 0xc9, 0x13, 0x59, 0x3b, 0xdc, 0x83, 0x87, 0x22, 0x3d, 0x2e, 0x49,
	0x0d, 0x3c, 0x94, 0x2f, 0xdb, 0xea, 0x24, 0x0f, 0xd2, 0xfc, 0x05, 0x81, 0x75, 0x2f, 0x15, 0x75,
	0x8f, 0x44, 0x2d, 0xe3, 0x70, 0x7a, 0x52, 0x15, 0x1a, 0x3e, 0x21, 0xb0, 0x2d, 0x96, 0xcd, 0x58,
	0x43, 0x81, 0xe3, 0xdd, 0x27, 0x5d, 0xda, 0x9a, 0x68, 0x47, 0x7b, 0xf4, 0x52, 0xb8, 0x13, 0x12,
	0x77, 0x1c, 0xc7, 0xf2, 0x65, 0x36, 0xde, 0xe1, 0x04, 0xe9, 0x7d, 0x4c, 0xa0, 0xb0, 0x62, 0xec,
	0x07, 0x24, 0xfb, 0x6e, 0xd4, 0xd3, 0x53, 0x1d, 0x67, 0xc5, 0xbf, 0x09, 0x94, 0x63, 0xf9, 0x4e,
	0x6b, 0xae, 0x70, 0xa2, 0x3b, 0x46, 0x46, 0xe7, 0xa6, 0x4d, 0x2e, 0xd7, 0x5d, 0xc9, 0x79, 0x57,
	0xca, 0x99, 0xc4, 0xd3, 0xf9, 0x4a, 0x91, 0xec, 0xff, 0xcc, 0x46, 0x18, 0x2d, 0x28, 0xca, 0xcf,
	0x04, 0x8a, 0xaf, 0xa2, 0xc0, 0x71, 0x29, 0xb0, 0x82, 0x07, 0xd3, 0xeb, 0x95, 0x2e, 0x08, 0x7f,
	0x24, 0xb0, 0x39, 0x56, 0x39, 0xd9, 0xdb, 0x61, 0xa5, 0x3b, 0x4a, 0xbc, 0x5b, 0xd5, 0x8c, 0xdc,
	0xef, 0x2b, 0xd6, 0xf7, 0x25, 0xeb, 0x59, 0x9c, 0xcc, 0x57, 0x0c, 0xd9, 0xc2, 0x1a, 0x77, 0x16,
	0x77, 0xc4, 0x77, 0x83, 0x72, 0x3c, 0x22, 0xb0, 0xe6, 0x25, 0x51, 0x1f, 0x93, 0xd4, 0xa3, 0x58,
	0x49, 0xcf, 0x70, 0x27, 0x4a, 0x9c, 0x27, 0x30, 0x18, 0xcb, 0xf1, 0xe2, 0x06, 0x17, 0x4f, 0x74,
	0x07, 0xe9, 0xd0, 0x65, 0x6b, 0x27, 0x97, 0xe3, 0xaa, 0xe4, 0x7c, 0x28, 0xe5, 0x9c, 0xc3, 0xa9,
	0x2e, 0x45, 0x68, 0xf7, 0xc6, 0xc2, 0xb8, 0x93, 0xec, 0x9e, 0xef, 0x1a, 0x61, 0xf7, 0x1d, 0xd4,
	0xe1, 0x09, 0x81, 0xcd, 0xaf, 0x8a, 0xb2, 0x13, 0x52, 0xd9, 0x11, 0x3c, 0xbc, 0xa8, 0x50, 0xdd,
	0x95, 0xe0, 0x3f, 0x04, 0x86, 0x17, 0x9d, 0x1c, 0xc9, 0x5e, 0x1c, 0x4f, 0xe5, 0xdb, 0x4e, 0x53,
	0x2f, 0x20, 0xda, 0xe9, 0xe5, 0x39, 0x2b, 0x5d, 0x57, 0xa5, 0xae, 0x4b, 0x78, 0xf1, 0x3f, 0x54,
	0x2c, 0xed, 0xaa, 0x12, 0xd4, 0xef, 0x39, 0x01, 0x7c, 0xb5, 0xd4, 0x86, 0x3b, 0xf6, 0x14, 0x9e,
	0xe9, 0xa1, 0x8a, 0x69, 0xea, 0xf0, 0x87, 0x64, 0x37, 0x10, 0xbb, 0x29, 0xe5, 0x39, 0x51, 0x97,
	0xde, 0xb9, 0xf2, 0x9c, 0xa8, 0x29, 0xd7, 0x31, 0xb5, 0x7f, 0xa8, 0xc6, 0x3c, 0xa3, 0x7c, 0x22,
	0xf0, 0x35, 0xc3, 0x2b, 0x5a, 0x50, 0x9a, 0xaf, 0x08, 0x14, 0x56, 0x0c, 0x7a, 0x97, 0x84, 0x1e,
	0xc6, 0xc1, 0x45, 0x55, 0x88, 0x43, 0xe2, 0xd7, 0x04, 0xb6, 0xc4, 0xcf, 0x7f, 0x79, 0xcb, 0xc3,
	0x1c, 0x1b, 0x6c, 0xe2, 0xc2, 0xa9, 0x8d, 0xe6, 0x77, 0x50, 0x74, 0xa3, 0x92, 0x6e, 0x1f, 0xee,
	0xe9, 0x92, 0xd2, 0xf0, 0xde, 0x19, 0x24, 0xf3, 0x21, 0x81, 0xb5, 0x2f, 0x8f, 0x6f, 0xaf, 0xe4,
	0x1b, 0xc1, 0x52, 0x92, 0x6f, 0x21, 0x8d, 0x21, 0xd8, 0xf4, 0x07, 0x4f, 0xe7, 0x4b, 0xe4, 0xd9,
	0x7c, 0x89, 0xfc, 0x31, 0x5f, 0x22, 0x0f, 0x5e, 0x94, 0xfa, 0x9e, 0xbd, 0x28, 0xf5, 0x3d, 0x7f,
	0x51, 0xea, 0xbb, 0x3a, 0x5a, 0xb7, 0xfd, 0xc6, 0xec, 0xb5, 0x4a, 0x8d, 0xdf, 0xe8, 0xa4, 0xf1,
	0x76, 0x14, 0xcf, 0x9f, 0x73, 0x99, 0xb8, 0xb6, 0x56, 0xbe, 0x72, 0xe4, 0xdf, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xa1, 0xe4, 0x1d, 0x5d, 0x74, 0x16, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// This endpoint is deprecated and will be removed in the future. Please use the `/sei/oracle/v1/denoms/{denom}/exchange_rate` instead.
	Deprecated_ExchangeRate(ctx context.Context, in *QueryExchangeRateRequest, opts ...grpc.CallOption) (*QueryExchangeRateResponse, error)
	// ExchangeRate returns exchange rate of a denom
	ExchangeRate(ctx context.Context, in *QueryExchangeRateRequest, opts ...grpc.CallOption) (*QueryExchangeRateResponse, error)
	// This endpoint is deprecated and will be removed in the future. Please use the `/sei/oracle/v1/denoms/exchange_rates` instead.
	Deprecated_ExchangeRates(ctx context.Context, in *QueryExchangeRatesRequest, opts ...grpc.CallOption) (*QueryExchangeRatesResponse, error)
	// ExchangeRates returns exchange rates of all denoms
	ExchangeRates(ctx context.Context, in *QueryExchangeRatesRequest, opts ...grpc.CallOption) (*QueryExchangeRatesResponse, error)
	// This endpoint is deprecated and will be removed in the future. Please use the `/sei/oracle/v1/denoms/actives` instead.
	Deprecated_Actives(ctx context.Context, in *QueryActivesRequest, opts ...grpc.CallOption) (*QueryActivesResponse, error)
	// Actives returns all active denoms
	Actives(ctx context.Context, in *QueryActivesRequest, opts ...grpc.CallOption) (*QueryActivesResponse, error)
	// This endpoint is deprecated and will be removed in the future. Please use the `/sei/oracle/v1/denoms/vote_targets` instead.
	Deprecated_VoteTargets(ctx context.Context, in *QueryVoteTargetsRequest, opts ...grpc.CallOption) (*QueryVoteTargetsResponse, error)
	// VoteTargets returns all vote target denoms
	VoteTargets(ctx context.Context, in *QueryVoteTargetsRequest, opts ...grpc.CallOption) (*QueryVoteTargetsResponse, error)
	// This endpoint is deprecated and will be removed in the future. Please use the `/sei/oracle/v1/denoms/price_snapshot_history` instead.
	Deprecated_PriceSnapshotHistory(ctx context.Context, in *QueryPriceSnapshotHistoryRequest, opts ...grpc.CallOption) (*QueryPriceSnapshotHistoryResponse, error)
	// PriceSnapshotHistory returns the history of price snapshots for all assets
	PriceSnapshotHistory(ctx context.Context, in *QueryPriceSnapshotHistoryRequest, opts ...grpc.CallOption) (*QueryPriceSnapshotHistoryResponse, error)
	// This endpoint is deprecated and will be removed in the future. Please use the `/sei/oracle/v1/denoms/twaps/{lookback_seconds}` instead.
	Deprecated_Twaps(ctx context.Context, in *QueryTwapsRequest, opts ...grpc.CallOption) (*QueryTwapsResponse, error)
	Twaps(ctx context.Context, in *QueryTwapsRequest, opts ...grpc.CallOption) (*QueryTwapsResponse, error)
	// This endpoint is deprecated and will be removed in the future. Please use the `/sei/oracle/v1/validators/{validator_addr}/feeder` instead.
	Deprecated_FeederDelegation(ctx context.Context, in *QueryFeederDelegationRequest, opts ...grpc.CallOption) (*QueryFeederDelegationResponse, error)
	// FeederDelegation returns feeder delegation of a validator
	FeederDelegation(ctx context.Context, in *QueryFeederDelegationRequest, opts ...grpc.CallOption) (*QueryFeederDelegationResponse, error)
	// This endpoint is deprecated and will be removed in the future. Please use the `/sei/oracle/v1/validators/{validator_addr}/vote_penalty_counter` instead.
	Deprecated_VotePenaltyCounter(ctx context.Context, in *QueryVotePenaltyCounterRequest, opts ...grpc.CallOption) (*QueryVotePenaltyCounterResponse, error)
	// MissCounter returns oracle miss counter of a validator
	VotePenaltyCounter(ctx context.Context, in *QueryVotePenaltyCounterRequest, opts ...grpc.CallOption) (*QueryVotePenaltyCounterResponse, error)
	// This endpoint is deprecated and will be removed in the future. Please use the `/sei/oracle/v1/slash_window` instead.
	Deprecated_SlashWindow(ctx context.Context, in *QuerySlashWindowRequest, opts ...grpc.CallOption) (*QuerySlashWindowResponse, error)
	// SlashWindow returns slash window information
	SlashWindow(ctx context.Context, in *QuerySlashWindowRequest, opts ...grpc.CallOption) (*QuerySlashWindowResponse, error)
	// This endpoint is deprecated and will be removed in the future. Please use the `/sei/oracle/v1/params` instead.
	Deprecated_Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Params queries all parameters.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

// Deprecated: Do not use.
func (c *queryClient) Deprecated_ExchangeRate(ctx context.Context, in *QueryExchangeRateRequest, opts ...grpc.CallOption) (*QueryExchangeRateResponse, error) {
	out := new(QueryExchangeRateResponse)
	err := c.cc.Invoke(ctx, "/seiprotocol.seichain.oracle.Query/deprecated_ExchangeRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ExchangeRate(ctx context.Context, in *QueryExchangeRateRequest, opts ...grpc.CallOption) (*QueryExchangeRateResponse, error) {
	out := new(QueryExchangeRateResponse)
	err := c.cc.Invoke(ctx, "/seiprotocol.seichain.oracle.Query/ExchangeRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *queryClient) Deprecated_ExchangeRates(ctx context.Context, in *QueryExchangeRatesRequest, opts ...grpc.CallOption) (*QueryExchangeRatesResponse, error) {
	out := new(QueryExchangeRatesResponse)
	err := c.cc.Invoke(ctx, "/seiprotocol.seichain.oracle.Query/deprecated_ExchangeRates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ExchangeRates(ctx context.Context, in *QueryExchangeRatesRequest, opts ...grpc.CallOption) (*QueryExchangeRatesResponse, error) {
	out := new(QueryExchangeRatesResponse)
	err := c.cc.Invoke(ctx, "/seiprotocol.seichain.oracle.Query/ExchangeRates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *queryClient) Deprecated_Actives(ctx context.Context, in *QueryActivesRequest, opts ...grpc.CallOption) (*QueryActivesResponse, error) {
	out := new(QueryActivesResponse)
	err := c.cc.Invoke(ctx, "/seiprotocol.seichain.oracle.Query/deprecated_Actives", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Actives(ctx context.Context, in *QueryActivesRequest, opts ...grpc.CallOption) (*QueryActivesResponse, error) {
	out := new(QueryActivesResponse)
	err := c.cc.Invoke(ctx, "/seiprotocol.seichain.oracle.Query/Actives", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *queryClient) Deprecated_VoteTargets(ctx context.Context, in *QueryVoteTargetsRequest, opts ...grpc.CallOption) (*QueryVoteTargetsResponse, error) {
	out := new(QueryVoteTargetsResponse)
	err := c.cc.Invoke(ctx, "/seiprotocol.seichain.oracle.Query/deprecated_VoteTargets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VoteTargets(ctx context.Context, in *QueryVoteTargetsRequest, opts ...grpc.CallOption) (*QueryVoteTargetsResponse, error) {
	out := new(QueryVoteTargetsResponse)
	err := c.cc.Invoke(ctx, "/seiprotocol.seichain.oracle.Query/VoteTargets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *queryClient) Deprecated_PriceSnapshotHistory(ctx context.Context, in *QueryPriceSnapshotHistoryRequest, opts ...grpc.CallOption) (*QueryPriceSnapshotHistoryResponse, error) {
	out := new(QueryPriceSnapshotHistoryResponse)
	err := c.cc.Invoke(ctx, "/seiprotocol.seichain.oracle.Query/deprecated_PriceSnapshotHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PriceSnapshotHistory(ctx context.Context, in *QueryPriceSnapshotHistoryRequest, opts ...grpc.CallOption) (*QueryPriceSnapshotHistoryResponse, error) {
	out := new(QueryPriceSnapshotHistoryResponse)
	err := c.cc.Invoke(ctx, "/seiprotocol.seichain.oracle.Query/PriceSnapshotHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *queryClient) Deprecated_Twaps(ctx context.Context, in *QueryTwapsRequest, opts ...grpc.CallOption) (*QueryTwapsResponse, error) {
	out := new(QueryTwapsResponse)
	err := c.cc.Invoke(ctx, "/seiprotocol.seichain.oracle.Query/deprecated_Twaps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Twaps(ctx context.Context, in *QueryTwapsRequest, opts ...grpc.CallOption) (*QueryTwapsResponse, error) {
	out := new(QueryTwapsResponse)
	err := c.cc.Invoke(ctx, "/seiprotocol.seichain.oracle.Query/Twaps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *queryClient) Deprecated_FeederDelegation(ctx context.Context, in *QueryFeederDelegationRequest, opts ...grpc.CallOption) (*QueryFeederDelegationResponse, error) {
	out := new(QueryFeederDelegationResponse)
	err := c.cc.Invoke(ctx, "/seiprotocol.seichain.oracle.Query/deprecated_FeederDelegation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FeederDelegation(ctx context.Context, in *QueryFeederDelegationRequest, opts ...grpc.CallOption) (*QueryFeederDelegationResponse, error) {
	out := new(QueryFeederDelegationResponse)
	err := c.cc.Invoke(ctx, "/seiprotocol.seichain.oracle.Query/FeederDelegation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *queryClient) Deprecated_VotePenaltyCounter(ctx context.Context, in *QueryVotePenaltyCounterRequest, opts ...grpc.CallOption) (*QueryVotePenaltyCounterResponse, error) {
	out := new(QueryVotePenaltyCounterResponse)
	err := c.cc.Invoke(ctx, "/seiprotocol.seichain.oracle.Query/deprecated_VotePenaltyCounter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VotePenaltyCounter(ctx context.Context, in *QueryVotePenaltyCounterRequest, opts ...grpc.CallOption) (*QueryVotePenaltyCounterResponse, error) {
	out := new(QueryVotePenaltyCounterResponse)
	err := c.cc.Invoke(ctx, "/seiprotocol.seichain.oracle.Query/VotePenaltyCounter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *queryClient) Deprecated_SlashWindow(ctx context.Context, in *QuerySlashWindowRequest, opts ...grpc.CallOption) (*QuerySlashWindowResponse, error) {
	out := new(QuerySlashWindowResponse)
	err := c.cc.Invoke(ctx, "/seiprotocol.seichain.oracle.Query/deprecated_SlashWindow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SlashWindow(ctx context.Context, in *QuerySlashWindowRequest, opts ...grpc.CallOption) (*QuerySlashWindowResponse, error) {
	out := new(QuerySlashWindowResponse)
	err := c.cc.Invoke(ctx, "/seiprotocol.seichain.oracle.Query/SlashWindow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *queryClient) Deprecated_Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/seiprotocol.seichain.oracle.Query/deprecated_Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/seiprotocol.seichain.oracle.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// This endpoint is deprecated and will be removed in the future. Please use the `/sei/oracle/v1/denoms/{denom}/exchange_rate` instead.
	Deprecated_ExchangeRate(context.Context, *QueryExchangeRateRequest) (*QueryExchangeRateResponse, error)
	// ExchangeRate returns exchange rate of a denom
	ExchangeRate(context.Context, *QueryExchangeRateRequest) (*QueryExchangeRateResponse, error)
	// This endpoint is deprecated and will be removed in the future. Please use the `/sei/oracle/v1/denoms/exchange_rates` instead.
	Deprecated_ExchangeRates(context.Context, *QueryExchangeRatesRequest) (*QueryExchangeRatesResponse, error)
	// ExchangeRates returns exchange rates of all denoms
	ExchangeRates(context.Context, *QueryExchangeRatesRequest) (*QueryExchangeRatesResponse, error)
	// This endpoint is deprecated and will be removed in the future. Please use the `/sei/oracle/v1/denoms/actives` instead.
	Deprecated_Actives(context.Context, *QueryActivesRequest) (*QueryActivesResponse, error)
	// Actives returns all active denoms
	Actives(context.Context, *QueryActivesRequest) (*QueryActivesResponse, error)
	// This endpoint is deprecated and will be removed in the future. Please use the `/sei/oracle/v1/denoms/vote_targets` instead.
	Deprecated_VoteTargets(context.Context, *QueryVoteTargetsRequest) (*QueryVoteTargetsResponse, error)
	// VoteTargets returns all vote target denoms
	VoteTargets(context.Context, *QueryVoteTargetsRequest) (*QueryVoteTargetsResponse, error)
	// This endpoint is deprecated and will be removed in the future. Please use the `/sei/oracle/v1/denoms/price_snapshot_history` instead.
	Deprecated_PriceSnapshotHistory(context.Context, *QueryPriceSnapshotHistoryRequest) (*QueryPriceSnapshotHistoryResponse, error)
	// PriceSnapshotHistory returns the history of price snapshots for all assets
	PriceSnapshotHistory(context.Context, *QueryPriceSnapshotHistoryRequest) (*QueryPriceSnapshotHistoryResponse, error)
	// This endpoint is deprecated and will be removed in the future. Please use the `/sei/oracle/v1/denoms/twaps/{lookback_seconds}` instead.
	Deprecated_Twaps(context.Context, *QueryTwapsRequest) (*QueryTwapsResponse, error)
	Twaps(context.Context, *QueryTwapsRequest) (*QueryTwapsResponse, error)
	// This endpoint is deprecated and will be removed in the future. Please use the `/sei/oracle/v1/validators/{validator_addr}/feeder` instead.
	Deprecated_FeederDelegation(context.Context, *QueryFeederDelegationRequest) (*QueryFeederDelegationResponse, error)
	// FeederDelegation returns feeder delegation of a validator
	FeederDelegation(context.Context, *QueryFeederDelegationRequest) (*QueryFeederDelegationResponse, error)
	// This endpoint is deprecated and will be removed in the future. Please use the `/sei/oracle/v1/validators/{validator_addr}/vote_penalty_counter` instead.
	Deprecated_VotePenaltyCounter(context.Context, *QueryVotePenaltyCounterRequest) (*QueryVotePenaltyCounterResponse, error)
	// MissCounter returns oracle miss counter of a validator
	VotePenaltyCounter(context.Context, *QueryVotePenaltyCounterRequest) (*QueryVotePenaltyCounterResponse, error)
	// This endpoint is deprecated and will be removed in the future. Please use the `/sei/oracle/v1/slash_window` instead.
	Deprecated_SlashWindow(context.Context, *QuerySlashWindowRequest) (*QuerySlashWindowResponse, error)
	// SlashWindow returns slash window information
	SlashWindow(context.Context, *QuerySlashWindowRequest) (*QuerySlashWindowResponse, error)
	// This endpoint is deprecated and will be removed in the future. Please use the `/sei/oracle/v1/params` instead.
	Deprecated_Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Params queries all parameters.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Deprecated_ExchangeRate(ctx context.Context, req *QueryExchangeRateRequest) (*QueryExchangeRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deprecated_ExchangeRate not implemented")
}
func (*UnimplementedQueryServer) ExchangeRate(ctx context.Context, req *QueryExchangeRateRequest) (*QueryExchangeRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeRate not implemented")
}
func (*UnimplementedQueryServer) Deprecated_ExchangeRates(ctx context.Context, req *QueryExchangeRatesRequest) (*QueryExchangeRatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deprecated_ExchangeRates not implemented")
}
func (*UnimplementedQueryServer) ExchangeRates(ctx context.Context, req *QueryExchangeRatesRequest) (*QueryExchangeRatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeRates not implemented")
}
func (*UnimplementedQueryServer) Deprecated_Actives(ctx context.Context, req *QueryActivesRequest) (*QueryActivesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deprecated_Actives not implemented")
}
func (*UnimplementedQueryServer) Actives(ctx context.Context, req *QueryActivesRequest) (*QueryActivesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Actives not implemented")
}
func (*UnimplementedQueryServer) Deprecated_VoteTargets(ctx context.Context, req *QueryVoteTargetsRequest) (*QueryVoteTargetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deprecated_VoteTargets not implemented")
}
func (*UnimplementedQueryServer) VoteTargets(ctx context.Context, req *QueryVoteTargetsRequest) (*QueryVoteTargetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteTargets not implemented")
}
func (*UnimplementedQueryServer) Deprecated_PriceSnapshotHistory(ctx context.Context, req *QueryPriceSnapshotHistoryRequest) (*QueryPriceSnapshotHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deprecated_PriceSnapshotHistory not implemented")
}
func (*UnimplementedQueryServer) PriceSnapshotHistory(ctx context.Context, req *QueryPriceSnapshotHistoryRequest) (*QueryPriceSnapshotHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PriceSnapshotHistory not implemented")
}
func (*UnimplementedQueryServer) Deprecated_Twaps(ctx context.Context, req *QueryTwapsRequest) (*QueryTwapsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deprecated_Twaps not implemented")
}
func (*UnimplementedQueryServer) Twaps(ctx context.Context, req *QueryTwapsRequest) (*QueryTwapsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Twaps not implemented")
}
func (*UnimplementedQueryServer) Deprecated_FeederDelegation(ctx context.Context, req *QueryFeederDelegationRequest) (*QueryFeederDelegationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deprecated_FeederDelegation not implemented")
}
func (*UnimplementedQueryServer) FeederDelegation(ctx context.Context, req *QueryFeederDelegationRequest) (*QueryFeederDelegationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeederDelegation not implemented")
}
func (*UnimplementedQueryServer) Deprecated_VotePenaltyCounter(ctx context.Context, req *QueryVotePenaltyCounterRequest) (*QueryVotePenaltyCounterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deprecated_VotePenaltyCounter not implemented")
}
func (*UnimplementedQueryServer) VotePenaltyCounter(ctx context.Context, req *QueryVotePenaltyCounterRequest) (*QueryVotePenaltyCounterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VotePenaltyCounter not implemented")
}
func (*UnimplementedQueryServer) Deprecated_SlashWindow(ctx context.Context, req *QuerySlashWindowRequest) (*QuerySlashWindowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deprecated_SlashWindow not implemented")
}
func (*UnimplementedQueryServer) SlashWindow(ctx context.Context, req *QuerySlashWindowRequest) (*QuerySlashWindowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SlashWindow not implemented")
}
func (*UnimplementedQueryServer) Deprecated_Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deprecated_Params not implemented")
}
func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Deprecated_ExchangeRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryExchangeRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Deprecated_ExchangeRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seiprotocol.seichain.oracle.Query/Deprecated_ExchangeRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Deprecated_ExchangeRate(ctx, req.(*QueryExchangeRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ExchangeRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryExchangeRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ExchangeRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seiprotocol.seichain.oracle.Query/ExchangeRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ExchangeRate(ctx, req.(*QueryExchangeRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Deprecated_ExchangeRates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryExchangeRatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Deprecated_ExchangeRates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seiprotocol.seichain.oracle.Query/Deprecated_ExchangeRates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Deprecated_ExchangeRates(ctx, req.(*QueryExchangeRatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ExchangeRates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryExchangeRatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ExchangeRates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seiprotocol.seichain.oracle.Query/ExchangeRates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ExchangeRates(ctx, req.(*QueryExchangeRatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Deprecated_Actives_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryActivesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Deprecated_Actives(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seiprotocol.seichain.oracle.Query/Deprecated_Actives",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Deprecated_Actives(ctx, req.(*QueryActivesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Actives_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryActivesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Actives(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seiprotocol.seichain.oracle.Query/Actives",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Actives(ctx, req.(*QueryActivesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Deprecated_VoteTargets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVoteTargetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Deprecated_VoteTargets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seiprotocol.seichain.oracle.Query/Deprecated_VoteTargets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Deprecated_VoteTargets(ctx, req.(*QueryVoteTargetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VoteTargets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVoteTargetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VoteTargets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seiprotocol.seichain.oracle.Query/VoteTargets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VoteTargets(ctx, req.(*QueryVoteTargetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Deprecated_PriceSnapshotHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPriceSnapshotHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Deprecated_PriceSnapshotHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seiprotocol.seichain.oracle.Query/Deprecated_PriceSnapshotHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Deprecated_PriceSnapshotHistory(ctx, req.(*QueryPriceSnapshotHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PriceSnapshotHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPriceSnapshotHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PriceSnapshotHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seiprotocol.seichain.oracle.Query/PriceSnapshotHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PriceSnapshotHistory(ctx, req.(*QueryPriceSnapshotHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Deprecated_Twaps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTwapsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Deprecated_Twaps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seiprotocol.seichain.oracle.Query/Deprecated_Twaps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Deprecated_Twaps(ctx, req.(*QueryTwapsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Twaps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTwapsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Twaps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seiprotocol.seichain.oracle.Query/Twaps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Twaps(ctx, req.(*QueryTwapsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Deprecated_FeederDelegation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFeederDelegationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Deprecated_FeederDelegation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seiprotocol.seichain.oracle.Query/Deprecated_FeederDelegation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Deprecated_FeederDelegation(ctx, req.(*QueryFeederDelegationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FeederDelegation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFeederDelegationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FeederDelegation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seiprotocol.seichain.oracle.Query/FeederDelegation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FeederDelegation(ctx, req.(*QueryFeederDelegationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Deprecated_VotePenaltyCounter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVotePenaltyCounterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Deprecated_VotePenaltyCounter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seiprotocol.seichain.oracle.Query/Deprecated_VotePenaltyCounter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Deprecated_VotePenaltyCounter(ctx, req.(*QueryVotePenaltyCounterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VotePenaltyCounter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVotePenaltyCounterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VotePenaltyCounter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seiprotocol.seichain.oracle.Query/VotePenaltyCounter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VotePenaltyCounter(ctx, req.(*QueryVotePenaltyCounterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Deprecated_SlashWindow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySlashWindowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Deprecated_SlashWindow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seiprotocol.seichain.oracle.Query/Deprecated_SlashWindow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Deprecated_SlashWindow(ctx, req.(*QuerySlashWindowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SlashWindow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySlashWindowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SlashWindow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seiprotocol.seichain.oracle.Query/SlashWindow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SlashWindow(ctx, req.(*QuerySlashWindowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Deprecated_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Deprecated_Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seiprotocol.seichain.oracle.Query/Deprecated_Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Deprecated_Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seiprotocol.seichain.oracle.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "seiprotocol.seichain.oracle.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "deprecated_ExchangeRate",
			Handler:    _Query_Deprecated_ExchangeRate_Handler,
		},
		{
			MethodName: "ExchangeRate",
			Handler:    _Query_ExchangeRate_Handler,
		},
		{
			MethodName: "deprecated_ExchangeRates",
			Handler:    _Query_Deprecated_ExchangeRates_Handler,
		},
		{
			MethodName: "ExchangeRates",
			Handler:    _Query_ExchangeRates_Handler,
		},
		{
			MethodName: "deprecated_Actives",
			Handler:    _Query_Deprecated_Actives_Handler,
		},
		{
			MethodName: "Actives",
			Handler:    _Query_Actives_Handler,
		},
		{
			MethodName: "deprecated_VoteTargets",
			Handler:    _Query_Deprecated_VoteTargets_Handler,
		},
		{
			MethodName: "VoteTargets",
			Handler:    _Query_VoteTargets_Handler,
		},
		{
			MethodName: "deprecated_PriceSnapshotHistory",
			Handler:    _Query_Deprecated_PriceSnapshotHistory_Handler,
		},
		{
			MethodName: "PriceSnapshotHistory",
			Handler:    _Query_PriceSnapshotHistory_Handler,
		},
		{
			MethodName: "deprecated_Twaps",
			Handler:    _Query_Deprecated_Twaps_Handler,
		},
		{
			MethodName: "Twaps",
			Handler:    _Query_Twaps_Handler,
		},
		{
			MethodName: "deprecated_FeederDelegation",
			Handler:    _Query_Deprecated_FeederDelegation_Handler,
		},
		{
			MethodName: "FeederDelegation",
			Handler:    _Query_FeederDelegation_Handler,
		},
		{
			MethodName: "deprecated_VotePenaltyCounter",
			Handler:    _Query_Deprecated_VotePenaltyCounter_Handler,
		},
		{
			MethodName: "VotePenaltyCounter",
			Handler:    _Query_VotePenaltyCounter_Handler,
		},
		{
			MethodName: "deprecated_SlashWindow",
			Handler:    _Query_Deprecated_SlashWindow_Handler,
		},
		{
			MethodName: "SlashWindow",
			Handler:    _Query_SlashWindow_Handler,
		},
		{
			MethodName: "deprecated_Params",
			Handler:    _Query_Deprecated_Params_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "oracle/query.proto",
}

func (m *QueryExchangeRateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExchangeRateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExchangeRateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryExchangeRateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExchangeRateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExchangeRateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.OracleExchangeRate.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryExchangeRatesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExchangeRatesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExchangeRatesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DenomOracleExchangeRatePair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DenomOracleExchangeRatePair) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DenomOracleExchangeRatePair) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.OracleExchangeRate.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryExchangeRatesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExchangeRatesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExchangeRatesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DenomOracleExchangeRatePairs) > 0 {
		for iNdEx := len(m.DenomOracleExchangeRatePairs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DenomOracleExchangeRatePairs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryActivesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryActivesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryActivesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryActivesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryActivesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryActivesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Actives) > 0 {
		for iNdEx := len(m.Actives) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Actives[iNdEx])
			copy(dAtA[i:], m.Actives[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Actives[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryVoteTargetsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVoteTargetsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVoteTargetsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryVoteTargetsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVoteTargetsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVoteTargetsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VoteTargets) > 0 {
		for iNdEx := len(m.VoteTargets) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.VoteTargets[iNdEx])
			copy(dAtA[i:], m.VoteTargets[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.VoteTargets[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryPriceSnapshotHistoryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPriceSnapshotHistoryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPriceSnapshotHistoryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryPriceSnapshotHistoryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPriceSnapshotHistoryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPriceSnapshotHistoryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PriceSnapshots) > 0 {
		for iNdEx := len(m.PriceSnapshots) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PriceSnapshots[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryTwapsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTwapsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTwapsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LookbackSeconds != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.LookbackSeconds))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryTwapsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTwapsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTwapsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OracleTwaps) > 0 {
		for iNdEx := len(m.OracleTwaps) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OracleTwaps[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryFeederDelegationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFeederDelegationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFeederDelegationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValidatorAddr) > 0 {
		i -= len(m.ValidatorAddr)
		copy(dAtA[i:], m.ValidatorAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValidatorAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFeederDelegationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFeederDelegationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFeederDelegationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FeederAddr) > 0 {
		i -= len(m.FeederAddr)
		copy(dAtA[i:], m.FeederAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.FeederAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryVotePenaltyCounterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVotePenaltyCounterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVotePenaltyCounterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValidatorAddr) > 0 {
		i -= len(m.ValidatorAddr)
		copy(dAtA[i:], m.ValidatorAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValidatorAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryVotePenaltyCounterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVotePenaltyCounterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVotePenaltyCounterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VotePenaltyCounter != nil {
		{
			size, err := m.VotePenaltyCounter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySlashWindowRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySlashWindowRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySlashWindowRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QuerySlashWindowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySlashWindowResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySlashWindowResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WindowProgress != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.WindowProgress))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryExchangeRateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryExchangeRateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.OracleExchangeRate.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryExchangeRatesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DenomOracleExchangeRatePair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = m.OracleExchangeRate.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryExchangeRatesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DenomOracleExchangeRatePairs) > 0 {
		for _, e := range m.DenomOracleExchangeRatePairs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryActivesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryActivesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Actives) > 0 {
		for _, s := range m.Actives {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryVoteTargetsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryVoteTargetsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.VoteTargets) > 0 {
		for _, s := range m.VoteTargets {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryPriceSnapshotHistoryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryPriceSnapshotHistoryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PriceSnapshots) > 0 {
		for _, e := range m.PriceSnapshots {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryTwapsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LookbackSeconds != 0 {
		n += 1 + sovQuery(uint64(m.LookbackSeconds))
	}
	return n
}

func (m *QueryTwapsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OracleTwaps) > 0 {
		for _, e := range m.OracleTwaps {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryFeederDelegationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFeederDelegationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FeederAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryVotePenaltyCounterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryVotePenaltyCounterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VotePenaltyCounter != nil {
		l = m.VotePenaltyCounter.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySlashWindowRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QuerySlashWindowResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WindowProgress != 0 {
		n += 1 + sovQuery(uint64(m.WindowProgress))
	}
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryExchangeRateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExchangeRateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExchangeRateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExchangeRateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExchangeRateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExchangeRateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleExchangeRate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OracleExchangeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExchangeRatesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExchangeRatesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExchangeRatesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DenomOracleExchangeRatePair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DenomOracleExchangeRatePair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DenomOracleExchangeRatePair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleExchangeRate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OracleExchangeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExchangeRatesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExchangeRatesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExchangeRatesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomOracleExchangeRatePairs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DenomOracleExchangeRatePairs = append(m.DenomOracleExchangeRatePairs, DenomOracleExchangeRatePair{})
			if err := m.DenomOracleExchangeRatePairs[len(m.DenomOracleExchangeRatePairs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryActivesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryActivesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryActivesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryActivesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryActivesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryActivesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actives", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Actives = append(m.Actives, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVoteTargetsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVoteTargetsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVoteTargetsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVoteTargetsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVoteTargetsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVoteTargetsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteTargets", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoteTargets = append(m.VoteTargets, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPriceSnapshotHistoryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPriceSnapshotHistoryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPriceSnapshotHistoryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPriceSnapshotHistoryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPriceSnapshotHistoryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPriceSnapshotHistoryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceSnapshots", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PriceSnapshots = append(m.PriceSnapshots, PriceSnapshot{})
			if err := m.PriceSnapshots[len(m.PriceSnapshots)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTwapsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTwapsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTwapsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LookbackSeconds", wireType)
			}
			m.LookbackSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LookbackSeconds |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTwapsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTwapsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTwapsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleTwaps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OracleTwaps = append(m.OracleTwaps, OracleTwap{})
			if err := m.OracleTwaps[len(m.OracleTwaps)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFeederDelegationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFeederDelegationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFeederDelegationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFeederDelegationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFeederDelegationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFeederDelegationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeederAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeederAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVotePenaltyCounterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVotePenaltyCounterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVotePenaltyCounterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVotePenaltyCounterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVotePenaltyCounterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVotePenaltyCounterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotePenaltyCounter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VotePenaltyCounter == nil {
				m.VotePenaltyCounter = &VotePenaltyCounter{}
			}
			if err := m.VotePenaltyCounter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySlashWindowRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySlashWindowRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySlashWindowRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySlashWindowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySlashWindowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySlashWindowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WindowProgress", wireType)
			}
			m.WindowProgress = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WindowProgress |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
