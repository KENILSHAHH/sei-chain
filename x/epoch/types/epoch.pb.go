// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: epoch/v1/epoch.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Epoch struct {
	GenesisTime           time.Time     `protobuf:"bytes,1,opt,name=genesis_time,json=genesisTime,proto3,stdtime" json:"genesis_time" yaml:"genesis_time"`
	EpochDuration         time.Duration `protobuf:"bytes,2,opt,name=epoch_duration,json=epochDuration,proto3,stdduration" json:"duration,omitempty" yaml:"epoch_duration"`
	CurrentEpoch          uint64        `protobuf:"varint,3,opt,name=current_epoch,json=currentEpoch,proto3" json:"current_epoch" yaml:"current_epoch"`
	CurrentEpochStartTime time.Time     `protobuf:"bytes,4,opt,name=current_epoch_start_time,json=currentEpochStartTime,proto3,stdtime" json:"current_epoch_start_time" yaml:"current_epoch_start_time"`
	CurrentEpochHeight    int64         `protobuf:"varint,5,opt,name=current_epoch_height,json=currentEpochHeight,proto3" json:"current_epoch_height" yaml:"current_epoch_height"`
}

func (m *Epoch) Reset()         { *m = Epoch{} }
func (m *Epoch) String() string { return proto.CompactTextString(m) }
func (*Epoch) ProtoMessage()    {}
func (*Epoch) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f63e339ba8af677, []int{0}
}
func (m *Epoch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Epoch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Epoch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Epoch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Epoch.Merge(m, src)
}
func (m *Epoch) XXX_Size() int {
	return m.Size()
}
func (m *Epoch) XXX_DiscardUnknown() {
	xxx_messageInfo_Epoch.DiscardUnknown(m)
}

var xxx_messageInfo_Epoch proto.InternalMessageInfo

func (m *Epoch) GetGenesisTime() time.Time {
	if m != nil {
		return m.GenesisTime
	}
	return time.Time{}
}

func (m *Epoch) GetEpochDuration() time.Duration {
	if m != nil {
		return m.EpochDuration
	}
	return 0
}

func (m *Epoch) GetCurrentEpoch() uint64 {
	if m != nil {
		return m.CurrentEpoch
	}
	return 0
}

func (m *Epoch) GetCurrentEpochStartTime() time.Time {
	if m != nil {
		return m.CurrentEpochStartTime
	}
	return time.Time{}
}

func (m *Epoch) GetCurrentEpochHeight() int64 {
	if m != nil {
		return m.CurrentEpochHeight
	}
	return 0
}

func init() {
	proto.RegisterType((*Epoch)(nil), "sei.epoch.v1.Epoch")
}

func init() { proto.RegisterFile("epoch/v1/epoch.proto", fileDescriptor_4f63e339ba8af677) }

var fileDescriptor_4f63e339ba8af677 = []byte{
	// 415 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0x31, 0x8f, 0x9b, 0x30,
	0x1c, 0xc5, 0x71, 0x93, 0x74, 0x20, 0x49, 0x07, 0x4a, 0x24, 0x9a, 0x4a, 0x38, 0x62, 0x4a, 0xd5,
	0x16, 0x2b, 0xed, 0x10, 0xa9, 0x23, 0x6a, 0xa5, 0x76, 0xe9, 0x90, 0x76, 0xea, 0x50, 0x44, 0xa8,
	0x0b, 0x96, 0x02, 0x46, 0x60, 0xa2, 0xb2, 0xf5, 0x23, 0x64, 0xbc, 0xf1, 0x3e, 0x4e, 0xc6, 0x8c,
	0x37, 0xf9, 0x4e, 0xc9, 0x96, 0x91, 0x4f, 0x70, 0xc2, 0x06, 0x09, 0xee, 0x22, 0xdd, 0x66, 0xff,
	0xdf, 0xfb, 0xbf, 0x1f, 0x7e, 0x42, 0xd5, 0x71, 0x42, 0xfd, 0x10, 0x6d, 0x17, 0x48, 0x1c, 0xec,
	0x24, 0xa5, 0x8c, 0x6a, 0xa3, 0x0c, 0x13, 0x5b, 0x0e, 0xb6, 0x8b, 0xa9, 0x1e, 0xd0, 0x80, 0x0a,
	0x01, 0x55, 0x27, 0xe9, 0x99, 0xc2, 0x80, 0xd2, 0x60, 0x83, 0x91, 0xb8, 0xad, 0xf3, 0xbf, 0x88,
	0x91, 0x08, 0x67, 0xcc, 0x8b, 0x92, 0xda, 0x60, 0x3e, 0x34, 0xfc, 0xc9, 0x53, 0x8f, 0x11, 0x1a,
	0x4b, 0xdd, 0xba, 0xee, 0xab, 0x83, 0x2f, 0x15, 0x43, 0xfb, 0xad, 0x8e, 0x02, 0x1c, 0xe3, 0x8c,
	0x64, 0x6e, 0x15, 0x62, 0x80, 0x19, 0x98, 0x0f, 0x3f, 0x4c, 0x6d, 0x19, 0x60, 0x37, 0x01, 0xf6,
	0xcf, 0x86, 0xe0, 0xc0, 0x3d, 0x87, 0x4a, 0xc9, 0xe1, 0xcb, 0xc2, 0x8b, 0x36, 0x9f, 0xac, 0xf6,
	0xb6, 0xb5, 0xbb, 0x85, 0x60, 0x35, 0xac, 0x47, 0xd5, 0x8a, 0x56, 0xa8, 0x2f, 0xc4, 0x63, 0xdc,
	0xe6, 0x0b, 0x8c, 0x67, 0x82, 0xf0, 0xea, 0x11, 0xe1, 0x73, 0x6d, 0x70, 0x96, 0x15, 0xe0, 0xcc,
	0xa1, 0xd6, 0xac, 0xbc, 0xa3, 0x11, 0x61, 0x38, 0x4a, 0x58, 0x51, 0x72, 0x38, 0x91, 0xd8, 0x6e,
	0xa8, 0x75, 0x55, 0x81, 0xc7, 0x62, 0xd8, 0xe4, 0x68, 0xdf, 0xd5, 0xb1, 0x9f, 0xa7, 0x29, 0x8e,
	0x99, 0x2b, 0x04, 0xa3, 0x37, 0x03, 0xf3, 0xbe, 0xf3, 0xe6, 0xcc, 0x61, 0x57, 0x28, 0x39, 0xd4,
	0x65, 0x6a, 0x67, 0x6c, 0xad, 0x46, 0xf5, 0x5d, 0x56, 0xf5, 0x1f, 0xa8, 0x46, 0xc7, 0xe0, 0x66,
	0xcc, 0x4b, 0x99, 0xec, 0xad, 0xff, 0x64, 0x6f, 0x6f, 0xeb, 0xde, 0xe0, 0x05, 0x54, 0x2b, 0x49,
	0x76, 0x38, 0x69, 0x93, 0x7f, 0x54, 0xa2, 0x68, 0x93, 0xa8, 0x7a, 0x77, 0x2f, 0xc4, 0x24, 0x08,
	0x99, 0x31, 0x98, 0x81, 0x79, 0xcf, 0x59, 0x9e, 0x39, 0xbc, 0xa8, 0x97, 0x1c, 0xbe, 0xbe, 0x44,
	0x95, 0xaa, 0xb5, 0xd2, 0xda, 0xb4, 0xaf, 0x62, 0xe8, 0x7c, 0xdb, 0x1f, 0x4d, 0x70, 0x38, 0x9a,
	0xe0, 0xee, 0x68, 0x82, 0xdd, 0xc9, 0x54, 0x0e, 0x27, 0x53, 0xb9, 0x39, 0x99, 0xca, 0x2f, 0x14,
	0x10, 0x16, 0xe6, 0x6b, 0xdb, 0xa7, 0x11, 0xca, 0x30, 0x79, 0x2f, 0xde, 0xea, 0xd3, 0x8d, 0xb8,
	0xf8, 0xa1, 0x47, 0x62, 0xf4, 0x4f, 0xfe, 0xd2, 0x88, 0x15, 0x09, 0xce, 0xd6, 0xcf, 0x85, 0xe3,
	0xe3, 0x7d, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd9, 0x00, 0x1a, 0xd9, 0xf1, 0x02, 0x00, 0x00,
}

func (m *Epoch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Epoch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Epoch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CurrentEpochHeight != 0 {
		i = encodeVarintEpoch(dAtA, i, uint64(m.CurrentEpochHeight))
		i--
		dAtA[i] = 0x28
	}
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CurrentEpochStartTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.CurrentEpochStartTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintEpoch(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x22
	if m.CurrentEpoch != 0 {
		i = encodeVarintEpoch(dAtA, i, uint64(m.CurrentEpoch))
		i--
		dAtA[i] = 0x18
	}
	n2, err2 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.EpochDuration, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.EpochDuration):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintEpoch(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x12
	n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.GenesisTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.GenesisTime):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintEpoch(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintEpoch(dAtA []byte, offset int, v uint64) int {
	offset -= sovEpoch(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Epoch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.GenesisTime)
	n += 1 + l + sovEpoch(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.EpochDuration)
	n += 1 + l + sovEpoch(uint64(l))
	if m.CurrentEpoch != 0 {
		n += 1 + sovEpoch(uint64(m.CurrentEpoch))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CurrentEpochStartTime)
	n += 1 + l + sovEpoch(uint64(l))
	if m.CurrentEpochHeight != 0 {
		n += 1 + sovEpoch(uint64(m.CurrentEpochHeight))
	}
	return n
}

func sovEpoch(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEpoch(x uint64) (n int) {
	return sovEpoch(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Epoch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEpoch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Epoch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Epoch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenesisTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpoch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEpoch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEpoch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.GenesisTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpoch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEpoch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEpoch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.EpochDuration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentEpoch", wireType)
			}
			m.CurrentEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpoch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentEpoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentEpochStartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpoch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEpoch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEpoch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CurrentEpochStartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentEpochHeight", wireType)
			}
			m.CurrentEpochHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpoch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentEpochHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEpoch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEpoch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEpoch(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEpoch
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEpoch
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEpoch
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEpoch
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEpoch
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEpoch
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEpoch        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEpoch          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEpoch = fmt.Errorf("proto: unexpected end of group")
)
