// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: evm/query.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QuerySeiAddressByEVMAddressRequest struct {
	EvmAddress string `protobuf:"bytes,1,opt,name=evm_address,json=evmAddress,proto3" json:"evm_address,omitempty"`
}

func (m *QuerySeiAddressByEVMAddressRequest) Reset()         { *m = QuerySeiAddressByEVMAddressRequest{} }
func (m *QuerySeiAddressByEVMAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySeiAddressByEVMAddressRequest) ProtoMessage()    {}
func (*QuerySeiAddressByEVMAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_11c0d37eed5339f7, []int{0}
}
func (m *QuerySeiAddressByEVMAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySeiAddressByEVMAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySeiAddressByEVMAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySeiAddressByEVMAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySeiAddressByEVMAddressRequest.Merge(m, src)
}
func (m *QuerySeiAddressByEVMAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySeiAddressByEVMAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySeiAddressByEVMAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySeiAddressByEVMAddressRequest proto.InternalMessageInfo

func (m *QuerySeiAddressByEVMAddressRequest) GetEvmAddress() string {
	if m != nil {
		return m.EvmAddress
	}
	return ""
}

type QuerySeiAddressByEVMAddressResponse struct {
	SeiAddress string `protobuf:"bytes,1,opt,name=sei_address,json=seiAddress,proto3" json:"sei_address,omitempty"`
	Associated bool   `protobuf:"varint,2,opt,name=associated,proto3" json:"associated,omitempty"`
}

func (m *QuerySeiAddressByEVMAddressResponse) Reset()         { *m = QuerySeiAddressByEVMAddressResponse{} }
func (m *QuerySeiAddressByEVMAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySeiAddressByEVMAddressResponse) ProtoMessage()    {}
func (*QuerySeiAddressByEVMAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11c0d37eed5339f7, []int{1}
}
func (m *QuerySeiAddressByEVMAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySeiAddressByEVMAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySeiAddressByEVMAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySeiAddressByEVMAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySeiAddressByEVMAddressResponse.Merge(m, src)
}
func (m *QuerySeiAddressByEVMAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySeiAddressByEVMAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySeiAddressByEVMAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySeiAddressByEVMAddressResponse proto.InternalMessageInfo

func (m *QuerySeiAddressByEVMAddressResponse) GetSeiAddress() string {
	if m != nil {
		return m.SeiAddress
	}
	return ""
}

func (m *QuerySeiAddressByEVMAddressResponse) GetAssociated() bool {
	if m != nil {
		return m.Associated
	}
	return false
}

type QueryEVMAddressBySeiAddressRequest struct {
	SeiAddress string `protobuf:"bytes,1,opt,name=sei_address,json=seiAddress,proto3" json:"sei_address,omitempty"`
}

func (m *QueryEVMAddressBySeiAddressRequest) Reset()         { *m = QueryEVMAddressBySeiAddressRequest{} }
func (m *QueryEVMAddressBySeiAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryEVMAddressBySeiAddressRequest) ProtoMessage()    {}
func (*QueryEVMAddressBySeiAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_11c0d37eed5339f7, []int{2}
}
func (m *QueryEVMAddressBySeiAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEVMAddressBySeiAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEVMAddressBySeiAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEVMAddressBySeiAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEVMAddressBySeiAddressRequest.Merge(m, src)
}
func (m *QueryEVMAddressBySeiAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryEVMAddressBySeiAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEVMAddressBySeiAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEVMAddressBySeiAddressRequest proto.InternalMessageInfo

func (m *QueryEVMAddressBySeiAddressRequest) GetSeiAddress() string {
	if m != nil {
		return m.SeiAddress
	}
	return ""
}

type QueryEVMAddressBySeiAddressResponse struct {
	EvmAddress string `protobuf:"bytes,1,opt,name=evm_address,json=evmAddress,proto3" json:"evm_address,omitempty"`
	Associated bool   `protobuf:"varint,2,opt,name=associated,proto3" json:"associated,omitempty"`
}

func (m *QueryEVMAddressBySeiAddressResponse) Reset()         { *m = QueryEVMAddressBySeiAddressResponse{} }
func (m *QueryEVMAddressBySeiAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryEVMAddressBySeiAddressResponse) ProtoMessage()    {}
func (*QueryEVMAddressBySeiAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11c0d37eed5339f7, []int{3}
}
func (m *QueryEVMAddressBySeiAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEVMAddressBySeiAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEVMAddressBySeiAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEVMAddressBySeiAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEVMAddressBySeiAddressResponse.Merge(m, src)
}
func (m *QueryEVMAddressBySeiAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryEVMAddressBySeiAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEVMAddressBySeiAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEVMAddressBySeiAddressResponse proto.InternalMessageInfo

func (m *QueryEVMAddressBySeiAddressResponse) GetEvmAddress() string {
	if m != nil {
		return m.EvmAddress
	}
	return ""
}

func (m *QueryEVMAddressBySeiAddressResponse) GetAssociated() bool {
	if m != nil {
		return m.Associated
	}
	return false
}

type QueryStaticCallRequest struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	To   string `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
}

func (m *QueryStaticCallRequest) Reset()         { *m = QueryStaticCallRequest{} }
func (m *QueryStaticCallRequest) String() string { return proto.CompactTextString(m) }
func (*QueryStaticCallRequest) ProtoMessage()    {}
func (*QueryStaticCallRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_11c0d37eed5339f7, []int{4}
}
func (m *QueryStaticCallRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStaticCallRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStaticCallRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStaticCallRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStaticCallRequest.Merge(m, src)
}
func (m *QueryStaticCallRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryStaticCallRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStaticCallRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStaticCallRequest proto.InternalMessageInfo

func (m *QueryStaticCallRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *QueryStaticCallRequest) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

type QueryStaticCallResponse struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *QueryStaticCallResponse) Reset()         { *m = QueryStaticCallResponse{} }
func (m *QueryStaticCallResponse) String() string { return proto.CompactTextString(m) }
func (*QueryStaticCallResponse) ProtoMessage()    {}
func (*QueryStaticCallResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11c0d37eed5339f7, []int{5}
}
func (m *QueryStaticCallResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStaticCallResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStaticCallResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStaticCallResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStaticCallResponse.Merge(m, src)
}
func (m *QueryStaticCallResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStaticCallResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStaticCallResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStaticCallResponse proto.InternalMessageInfo

func (m *QueryStaticCallResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryPointerRequest struct {
	PointerType PointerType `protobuf:"varint,1,opt,name=pointer_type,json=pointerType,proto3,enum=seiprotocol.seichain.evm.PointerType" json:"pointer_type,omitempty"`
	Pointee     string      `protobuf:"bytes,2,opt,name=pointee,proto3" json:"pointee,omitempty"`
}

func (m *QueryPointerRequest) Reset()         { *m = QueryPointerRequest{} }
func (m *QueryPointerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPointerRequest) ProtoMessage()    {}
func (*QueryPointerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_11c0d37eed5339f7, []int{6}
}
func (m *QueryPointerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPointerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPointerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPointerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPointerRequest.Merge(m, src)
}
func (m *QueryPointerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPointerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPointerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPointerRequest proto.InternalMessageInfo

func (m *QueryPointerRequest) GetPointerType() PointerType {
	if m != nil {
		return m.PointerType
	}
	return PointerType_ERC20
}

func (m *QueryPointerRequest) GetPointee() string {
	if m != nil {
		return m.Pointee
	}
	return ""
}

type QueryPointerResponse struct {
	Pointer string `protobuf:"bytes,1,opt,name=pointer,proto3" json:"pointer,omitempty"`
	Version uint32 `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	Exists  bool   `protobuf:"varint,3,opt,name=exists,proto3" json:"exists,omitempty"`
}

func (m *QueryPointerResponse) Reset()         { *m = QueryPointerResponse{} }
func (m *QueryPointerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPointerResponse) ProtoMessage()    {}
func (*QueryPointerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11c0d37eed5339f7, []int{7}
}
func (m *QueryPointerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPointerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPointerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPointerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPointerResponse.Merge(m, src)
}
func (m *QueryPointerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPointerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPointerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPointerResponse proto.InternalMessageInfo

func (m *QueryPointerResponse) GetPointer() string {
	if m != nil {
		return m.Pointer
	}
	return ""
}

func (m *QueryPointerResponse) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *QueryPointerResponse) GetExists() bool {
	if m != nil {
		return m.Exists
	}
	return false
}

type QueryBalanceSumRequest struct {
}

func (m *QueryBalanceSumRequest) Reset()         { *m = QueryBalanceSumRequest{} }
func (m *QueryBalanceSumRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBalanceSumRequest) ProtoMessage()    {}
func (*QueryBalanceSumRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_11c0d37eed5339f7, []int{8}
}
func (m *QueryBalanceSumRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBalanceSumRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBalanceSumRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBalanceSumRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBalanceSumRequest.Merge(m, src)
}
func (m *QueryBalanceSumRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBalanceSumRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBalanceSumRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBalanceSumRequest proto.InternalMessageInfo

type QueryBalanceSumResponse struct {
	Usei *github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=usei,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"usei"`
	Wei  *github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=wei,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"wei"`
}

func (m *QueryBalanceSumResponse) Reset()         { *m = QueryBalanceSumResponse{} }
func (m *QueryBalanceSumResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBalanceSumResponse) ProtoMessage()    {}
func (*QueryBalanceSumResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11c0d37eed5339f7, []int{9}
}
func (m *QueryBalanceSumResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBalanceSumResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBalanceSumResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBalanceSumResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBalanceSumResponse.Merge(m, src)
}
func (m *QueryBalanceSumResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBalanceSumResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBalanceSumResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBalanceSumResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*QuerySeiAddressByEVMAddressRequest)(nil), "seiprotocol.seichain.evm.QuerySeiAddressByEVMAddressRequest")
	proto.RegisterType((*QuerySeiAddressByEVMAddressResponse)(nil), "seiprotocol.seichain.evm.QuerySeiAddressByEVMAddressResponse")
	proto.RegisterType((*QueryEVMAddressBySeiAddressRequest)(nil), "seiprotocol.seichain.evm.QueryEVMAddressBySeiAddressRequest")
	proto.RegisterType((*QueryEVMAddressBySeiAddressResponse)(nil), "seiprotocol.seichain.evm.QueryEVMAddressBySeiAddressResponse")
	proto.RegisterType((*QueryStaticCallRequest)(nil), "seiprotocol.seichain.evm.QueryStaticCallRequest")
	proto.RegisterType((*QueryStaticCallResponse)(nil), "seiprotocol.seichain.evm.QueryStaticCallResponse")
	proto.RegisterType((*QueryPointerRequest)(nil), "seiprotocol.seichain.evm.QueryPointerRequest")
	proto.RegisterType((*QueryPointerResponse)(nil), "seiprotocol.seichain.evm.QueryPointerResponse")
	proto.RegisterType((*QueryBalanceSumRequest)(nil), "seiprotocol.seichain.evm.QueryBalanceSumRequest")
	proto.RegisterType((*QueryBalanceSumResponse)(nil), "seiprotocol.seichain.evm.QueryBalanceSumResponse")
}

func init() { proto.RegisterFile("evm/query.proto", fileDescriptor_11c0d37eed5339f7) }

var fileDescriptor_11c0d37eed5339f7 = []byte{
	// 663 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0xad, 0xd3, 0x7e, 0xed, 0xd7, 0x69, 0x29, 0xd2, 0x50, 0x15, 0x2b, 0x42, 0x6e, 0x65, 0xa0,
	0xaa, 0x90, 0x6c, 0xd3, 0xb2, 0x2d, 0x0b, 0x5c, 0x95, 0x9f, 0x05, 0x12, 0xb8, 0x88, 0x05, 0x9b,
	0x68, 0xe2, 0x5c, 0xd2, 0x11, 0xb1, 0xc7, 0xf5, 0x8c, 0x43, 0xb3, 0xe5, 0x09, 0x90, 0xe0, 0x05,
	0xd8, 0xf0, 0x26, 0x48, 0x2c, 0x2b, 0xb1, 0x41, 0x2c, 0x2a, 0xd4, 0xb2, 0xe2, 0x01, 0x58, 0x23,
	0x8f, 0xc7, 0x89, 0xdb, 0x24, 0x76, 0xc2, 0xc6, 0x99, 0x3b, 0x33, 0xe7, 0xdc, 0x73, 0x8f, 0x73,
	0x8c, 0xae, 0x42, 0x37, 0x70, 0x8e, 0x12, 0x88, 0x7b, 0x76, 0x14, 0x33, 0xc1, 0xb0, 0xce, 0x81,
	0xca, 0x95, 0xcf, 0x3a, 0x36, 0x07, 0xea, 0x1f, 0x12, 0x1a, 0xda, 0xd0, 0x0d, 0xea, 0x37, 0xda,
	0x8c, 0xb5, 0x3b, 0xe0, 0x90, 0x88, 0x3a, 0x24, 0x0c, 0x99, 0x20, 0x82, 0xb2, 0x90, 0x67, 0xb8,
	0xba, 0x24, 0x82, 0x30, 0x09, 0xf2, 0x8d, 0xd5, 0x36, 0x6b, 0x33, 0xb9, 0x74, 0xd2, 0x55, 0xb6,
	0x6b, 0xee, 0x23, 0xf3, 0x79, 0xda, 0xed, 0x00, 0xe8, 0x83, 0x56, 0x2b, 0x06, 0xce, 0xdd, 0xde,
	0xfe, 0xcb, 0xa7, 0x6a, 0xed, 0xc1, 0x51, 0x02, 0x5c, 0xe0, 0x75, 0xb4, 0x04, 0xdd, 0xa0, 0x41,
	0xb2, 0x5d, 0x5d, 0xdb, 0xd0, 0xb6, 0x16, 0x3d, 0x04, 0xdd, 0x40, 0xdd, 0x33, 0x5f, 0xa3, 0x9b,
	0xa5, 0x34, 0x3c, 0x62, 0x21, 0x87, 0x94, 0x87, 0x03, 0xbd, 0xcc, 0xc3, 0xfb, 0x20, 0x6c, 0x20,
	0x44, 0x38, 0x67, 0x3e, 0x25, 0x02, 0x5a, 0x7a, 0x6d, 0x43, 0xdb, 0xfa, 0xdf, 0x2b, 0xec, 0xf4,
	0xe5, 0x0e, 0xb8, 0xdd, 0x42, 0xcf, 0x82, 0xdc, 0xd2, 0x36, 0x7d, 0xb9, 0xe3, 0x68, 0x06, 0x72,
	0x4b, 0xc7, 0xae, 0x94, 0xbb, 0x8b, 0xd6, 0x32, 0x5b, 0xd2, 0x77, 0xe3, 0xef, 0x91, 0x4e, 0x27,
	0x97, 0x88, 0xd1, 0x5c, 0x8b, 0x08, 0x22, 0x39, 0x97, 0x3d, 0xb9, 0xc6, 0x2b, 0xa8, 0x26, 0x98,
	0x64, 0x59, 0xf4, 0x6a, 0x82, 0x99, 0x16, 0xba, 0x3e, 0x84, 0x56, 0xca, 0x46, 0xc0, 0xcd, 0x1e,
	0xba, 0x26, 0xaf, 0x3f, 0x63, 0x34, 0x14, 0x10, 0xe7, 0x9d, 0x1e, 0xa3, 0xe5, 0x28, 0xdb, 0x69,
	0x88, 0x5e, 0x04, 0x12, 0xb2, 0xb2, 0x73, 0xdb, 0x1e, 0xf7, 0xbf, 0xb2, 0x15, 0xfe, 0x45, 0x2f,
	0x02, 0x6f, 0x29, 0x1a, 0x14, 0x58, 0x47, 0x0b, 0x59, 0x09, 0x4a, 0x64, 0x5e, 0x9a, 0x4d, 0xb4,
	0x7a, 0xb1, 0xb5, 0x92, 0xd9, 0x47, 0xc4, 0xca, 0xbc, 0xbc, 0x4c, 0x4f, 0xba, 0x10, 0x73, 0xca,
	0x42, 0xc9, 0x75, 0xc5, 0xcb, 0x4b, 0xbc, 0x86, 0xe6, 0xe1, 0x98, 0x72, 0xc1, 0xf5, 0x59, 0xe9,
	0xa7, 0xaa, 0x4c, 0x5d, 0x79, 0xe9, 0x92, 0x0e, 0x09, 0x7d, 0x38, 0x48, 0x02, 0x35, 0xa1, 0xf9,
	0x59, 0x53, 0x46, 0x15, 0x8f, 0x94, 0x82, 0x87, 0x68, 0x2e, 0xe1, 0x40, 0xb3, 0xf6, 0xee, 0xce,
	0x8f, 0xd3, 0xf5, 0xcd, 0x36, 0x15, 0x87, 0x49, 0xd3, 0xf6, 0x59, 0xe0, 0xf8, 0x8c, 0x07, 0x8c,
	0xab, 0x1f, 0x8b, 0xb7, 0xde, 0x38, 0xa9, 0x45, 0xdc, 0x7e, 0x12, 0x8a, 0xdf, 0xa7, 0xeb, 0x12,
	0xe9, 0xc9, 0x27, 0xde, 0x43, 0xb3, 0x6f, 0x81, 0x66, 0x73, 0xbb, 0xdb, 0x53, 0xd1, 0xa4, 0x40,
	0x2f, 0x7d, 0xec, 0xfc, 0x99, 0x47, 0xff, 0x49, 0xa1, 0xf8, 0x8b, 0x86, 0xd6, 0x46, 0x67, 0x05,
	0xef, 0x8e, 0x7f, 0x33, 0xd5, 0x49, 0xad, 0xdf, 0xff, 0x47, 0x74, 0x66, 0x97, 0x69, 0xbf, 0xfb,
	0xf6, 0xeb, 0x43, 0x6d, 0x0b, 0x6f, 0x3a, 0x1c, 0xa8, 0x95, 0xf3, 0x38, 0x39, 0x8f, 0x93, 0x7e,
	0x54, 0x0a, 0xd1, 0x92, 0x73, 0x8c, 0x0e, 0x51, 0xe5, 0x1c, 0xa5, 0x11, 0xae, 0x9c, 0xa3, 0x3c,
	0xb9, 0x13, 0xcd, 0x51, 0x88, 0x36, 0xfe, 0xa4, 0x21, 0x34, 0x88, 0x19, 0xbe, 0x5b, 0xe5, 0xe2,
	0xe5, 0x3c, 0xd7, 0xb7, 0xa7, 0x40, 0x4c, 0xe3, 0xb5, 0x84, 0x35, 0xfc, 0x54, 0xd4, 0x47, 0x0d,
	0x2d, 0xa8, 0x80, 0x61, 0xab, 0xa2, 0xdd, 0xc5, 0x6f, 0x40, 0xdd, 0x9e, 0xf4, 0xba, 0x92, 0x76,
	0x47, 0x4a, 0xbb, 0x85, 0xcd, 0x12, 0x69, 0x79, 0x92, 0x53, 0xeb, 0x06, 0xc1, 0xab, 0xb4, 0x6e,
	0x28, 0xbe, 0x95, 0xd6, 0x0d, 0xa7, 0x7a, 0x22, 0xeb, 0x9a, 0x19, 0xac, 0xc1, 0x93, 0xc0, 0x7d,
	0xf4, 0xf5, 0xcc, 0xd0, 0x4e, 0xce, 0x0c, 0xed, 0xe7, 0x99, 0xa1, 0xbd, 0x3f, 0x37, 0x66, 0x4e,
	0xce, 0x8d, 0x99, 0xef, 0xe7, 0xc6, 0xcc, 0x2b, 0xab, 0x10, 0xe3, 0xcb, 0x5c, 0x56, 0x46, 0x76,
	0x2c, 0xe9, 0x64, 0xa2, 0x9b, 0xf3, 0xf2, 0xfc, 0xde, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x58,
	0x43, 0x10, 0x35, 0xa7, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	SeiAddressByEVMAddress(ctx context.Context, in *QuerySeiAddressByEVMAddressRequest, opts ...grpc.CallOption) (*QuerySeiAddressByEVMAddressResponse, error)
	EVMAddressBySeiAddress(ctx context.Context, in *QueryEVMAddressBySeiAddressRequest, opts ...grpc.CallOption) (*QueryEVMAddressBySeiAddressResponse, error)
	StaticCall(ctx context.Context, in *QueryStaticCallRequest, opts ...grpc.CallOption) (*QueryStaticCallResponse, error)
	Pointer(ctx context.Context, in *QueryPointerRequest, opts ...grpc.CallOption) (*QueryPointerResponse, error)
	BalanceSum(ctx context.Context, in *QueryBalanceSumRequest, opts ...grpc.CallOption) (*QueryBalanceSumResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) SeiAddressByEVMAddress(ctx context.Context, in *QuerySeiAddressByEVMAddressRequest, opts ...grpc.CallOption) (*QuerySeiAddressByEVMAddressResponse, error) {
	out := new(QuerySeiAddressByEVMAddressResponse)
	err := c.cc.Invoke(ctx, "/seiprotocol.seichain.evm.Query/SeiAddressByEVMAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EVMAddressBySeiAddress(ctx context.Context, in *QueryEVMAddressBySeiAddressRequest, opts ...grpc.CallOption) (*QueryEVMAddressBySeiAddressResponse, error) {
	out := new(QueryEVMAddressBySeiAddressResponse)
	err := c.cc.Invoke(ctx, "/seiprotocol.seichain.evm.Query/EVMAddressBySeiAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StaticCall(ctx context.Context, in *QueryStaticCallRequest, opts ...grpc.CallOption) (*QueryStaticCallResponse, error) {
	out := new(QueryStaticCallResponse)
	err := c.cc.Invoke(ctx, "/seiprotocol.seichain.evm.Query/StaticCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Pointer(ctx context.Context, in *QueryPointerRequest, opts ...grpc.CallOption) (*QueryPointerResponse, error) {
	out := new(QueryPointerResponse)
	err := c.cc.Invoke(ctx, "/seiprotocol.seichain.evm.Query/Pointer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BalanceSum(ctx context.Context, in *QueryBalanceSumRequest, opts ...grpc.CallOption) (*QueryBalanceSumResponse, error) {
	out := new(QueryBalanceSumResponse)
	err := c.cc.Invoke(ctx, "/seiprotocol.seichain.evm.Query/BalanceSum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	SeiAddressByEVMAddress(context.Context, *QuerySeiAddressByEVMAddressRequest) (*QuerySeiAddressByEVMAddressResponse, error)
	EVMAddressBySeiAddress(context.Context, *QueryEVMAddressBySeiAddressRequest) (*QueryEVMAddressBySeiAddressResponse, error)
	StaticCall(context.Context, *QueryStaticCallRequest) (*QueryStaticCallResponse, error)
	Pointer(context.Context, *QueryPointerRequest) (*QueryPointerResponse, error)
	BalanceSum(context.Context, *QueryBalanceSumRequest) (*QueryBalanceSumResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) SeiAddressByEVMAddress(ctx context.Context, req *QuerySeiAddressByEVMAddressRequest) (*QuerySeiAddressByEVMAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SeiAddressByEVMAddress not implemented")
}
func (*UnimplementedQueryServer) EVMAddressBySeiAddress(ctx context.Context, req *QueryEVMAddressBySeiAddressRequest) (*QueryEVMAddressBySeiAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EVMAddressBySeiAddress not implemented")
}
func (*UnimplementedQueryServer) StaticCall(ctx context.Context, req *QueryStaticCallRequest) (*QueryStaticCallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StaticCall not implemented")
}
func (*UnimplementedQueryServer) Pointer(ctx context.Context, req *QueryPointerRequest) (*QueryPointerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pointer not implemented")
}
func (*UnimplementedQueryServer) BalanceSum(ctx context.Context, req *QueryBalanceSumRequest) (*QueryBalanceSumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BalanceSum not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_SeiAddressByEVMAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySeiAddressByEVMAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SeiAddressByEVMAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seiprotocol.seichain.evm.Query/SeiAddressByEVMAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SeiAddressByEVMAddress(ctx, req.(*QuerySeiAddressByEVMAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EVMAddressBySeiAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEVMAddressBySeiAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EVMAddressBySeiAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seiprotocol.seichain.evm.Query/EVMAddressBySeiAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EVMAddressBySeiAddress(ctx, req.(*QueryEVMAddressBySeiAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StaticCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStaticCallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StaticCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seiprotocol.seichain.evm.Query/StaticCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StaticCall(ctx, req.(*QueryStaticCallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Pointer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPointerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Pointer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seiprotocol.seichain.evm.Query/Pointer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Pointer(ctx, req.(*QueryPointerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BalanceSum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBalanceSumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BalanceSum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seiprotocol.seichain.evm.Query/BalanceSum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BalanceSum(ctx, req.(*QueryBalanceSumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "seiprotocol.seichain.evm.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SeiAddressByEVMAddress",
			Handler:    _Query_SeiAddressByEVMAddress_Handler,
		},
		{
			MethodName: "EVMAddressBySeiAddress",
			Handler:    _Query_EVMAddressBySeiAddress_Handler,
		},
		{
			MethodName: "StaticCall",
			Handler:    _Query_StaticCall_Handler,
		},
		{
			MethodName: "Pointer",
			Handler:    _Query_Pointer_Handler,
		},
		{
			MethodName: "BalanceSum",
			Handler:    _Query_BalanceSum_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "evm/query.proto",
}

func (m *QuerySeiAddressByEVMAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySeiAddressByEVMAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySeiAddressByEVMAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EvmAddress) > 0 {
		i -= len(m.EvmAddress)
		copy(dAtA[i:], m.EvmAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.EvmAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySeiAddressByEVMAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySeiAddressByEVMAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySeiAddressByEVMAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Associated {
		i--
		if m.Associated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.SeiAddress) > 0 {
		i -= len(m.SeiAddress)
		copy(dAtA[i:], m.SeiAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SeiAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryEVMAddressBySeiAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEVMAddressBySeiAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEVMAddressBySeiAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SeiAddress) > 0 {
		i -= len(m.SeiAddress)
		copy(dAtA[i:], m.SeiAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SeiAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryEVMAddressBySeiAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEVMAddressBySeiAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEVMAddressBySeiAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Associated {
		i--
		if m.Associated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.EvmAddress) > 0 {
		i -= len(m.EvmAddress)
		copy(dAtA[i:], m.EvmAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.EvmAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryStaticCallRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStaticCallRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStaticCallRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.To) > 0 {
		i -= len(m.To)
		copy(dAtA[i:], m.To)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.To)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryStaticCallResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStaticCallResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStaticCallResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPointerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPointerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPointerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pointee) > 0 {
		i -= len(m.Pointee)
		copy(dAtA[i:], m.Pointee)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Pointee)))
		i--
		dAtA[i] = 0x12
	}
	if m.PointerType != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PointerType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryPointerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPointerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPointerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Exists {
		i--
		if m.Exists {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Version != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Pointer) > 0 {
		i -= len(m.Pointer)
		copy(dAtA[i:], m.Pointer)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Pointer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBalanceSumRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBalanceSumRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBalanceSumRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryBalanceSumResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBalanceSumResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBalanceSumResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Wei != nil {
		{
			size := m.Wei.Size()
			i -= size
			if _, err := m.Wei.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Usei != nil {
		{
			size := m.Usei.Size()
			i -= size
			if _, err := m.Usei.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QuerySeiAddressByEVMAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EvmAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySeiAddressByEVMAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SeiAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Associated {
		n += 2
	}
	return n
}

func (m *QueryEVMAddressBySeiAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SeiAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryEVMAddressBySeiAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EvmAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Associated {
		n += 2
	}
	return n
}

func (m *QueryStaticCallRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryStaticCallResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPointerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PointerType != 0 {
		n += 1 + sovQuery(uint64(m.PointerType))
	}
	l = len(m.Pointee)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPointerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Pointer)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovQuery(uint64(m.Version))
	}
	if m.Exists {
		n += 2
	}
	return n
}

func (m *QueryBalanceSumRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryBalanceSumResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Usei != nil {
		l = m.Usei.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Wei != nil {
		l = m.Wei.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QuerySeiAddressByEVMAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySeiAddressByEVMAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySeiAddressByEVMAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvmAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EvmAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySeiAddressByEVMAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySeiAddressByEVMAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySeiAddressByEVMAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeiAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SeiAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Associated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Associated = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEVMAddressBySeiAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEVMAddressBySeiAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEVMAddressBySeiAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeiAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SeiAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEVMAddressBySeiAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEVMAddressBySeiAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEVMAddressBySeiAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvmAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EvmAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Associated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Associated = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStaticCallRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStaticCallRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStaticCallRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStaticCallResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStaticCallResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStaticCallResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPointerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPointerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPointerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PointerType", wireType)
			}
			m.PointerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PointerType |= PointerType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pointee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pointee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPointerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPointerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPointerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pointer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pointer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exists", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Exists = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBalanceSumRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBalanceSumRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBalanceSumRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBalanceSumResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBalanceSumResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBalanceSumResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Usei", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Int
			m.Usei = &v
			if err := m.Usei.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wei", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Int
			m.Wei = &v
			if err := m.Wei.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
