// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: confidentialtransfers/zk.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TransferProofs struct {
	RemainingBalanceCommitmentValidityProof *CiphertextValidityProof `protobuf:"bytes,1,opt,name=remaining_balance_commitment_validity_proof,json=remainingBalanceCommitmentValidityProof,proto3" json:"remaining_balance_commitment_validity_proof,omitempty"`
	SenderTransferAmountLoValidityProof     *CiphertextValidityProof `protobuf:"bytes,2,opt,name=sender_transfer_amount_lo_validity_proof,json=senderTransferAmountLoValidityProof,proto3" json:"sender_transfer_amount_lo_validity_proof,omitempty"`
	SenderTransferAmountHiValidityProof     *CiphertextValidityProof `protobuf:"bytes,3,opt,name=sender_transfer_amount_hi_validity_proof,json=senderTransferAmountHiValidityProof,proto3" json:"sender_transfer_amount_hi_validity_proof,omitempty"`
	RecipientTransferAmountLoValidityProof  *CiphertextValidityProof `protobuf:"bytes,4,opt,name=recipient_transfer_amount_lo_validity_proof,json=recipientTransferAmountLoValidityProof,proto3" json:"recipient_transfer_amount_lo_validity_proof,omitempty"`
	RecipientTransferAmountHiValidityProof  *CiphertextValidityProof `protobuf:"bytes,5,opt,name=recipient_transfer_amount_hi_validity_proof,json=recipientTransferAmountHiValidityProof,proto3" json:"recipient_transfer_amount_hi_validity_proof,omitempty"`
}

func (m *TransferProofs) Reset()         { *m = TransferProofs{} }
func (m *TransferProofs) String() string { return proto.CompactTextString(m) }
func (*TransferProofs) ProtoMessage()    {}
func (*TransferProofs) Descriptor() ([]byte, []int) {
	return fileDescriptor_71d8640cbb42ddec, []int{0}
}
func (m *TransferProofs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransferProofs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransferProofs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransferProofs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferProofs.Merge(m, src)
}
func (m *TransferProofs) XXX_Size() int {
	return m.Size()
}
func (m *TransferProofs) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferProofs.DiscardUnknown(m)
}

var xxx_messageInfo_TransferProofs proto.InternalMessageInfo

func (m *TransferProofs) GetRemainingBalanceCommitmentValidityProof() *CiphertextValidityProof {
	if m != nil {
		return m.RemainingBalanceCommitmentValidityProof
	}
	return nil
}

func (m *TransferProofs) GetSenderTransferAmountLoValidityProof() *CiphertextValidityProof {
	if m != nil {
		return m.SenderTransferAmountLoValidityProof
	}
	return nil
}

func (m *TransferProofs) GetSenderTransferAmountHiValidityProof() *CiphertextValidityProof {
	if m != nil {
		return m.SenderTransferAmountHiValidityProof
	}
	return nil
}

func (m *TransferProofs) GetRecipientTransferAmountLoValidityProof() *CiphertextValidityProof {
	if m != nil {
		return m.RecipientTransferAmountLoValidityProof
	}
	return nil
}

func (m *TransferProofs) GetRecipientTransferAmountHiValidityProof() *CiphertextValidityProof {
	if m != nil {
		return m.RecipientTransferAmountHiValidityProof
	}
	return nil
}

type CiphertextValidityProof struct {
	// First commitment
	Commitment_1 []byte `protobuf:"bytes,1,opt,name=commitment_1,json=commitment1,proto3" json:"commitment_1,omitempty"`
	// Second commitment
	Commitment_2 []byte `protobuf:"bytes,2,opt,name=commitment_2,json=commitment2,proto3" json:"commitment_2,omitempty"`
	Challenge    []byte `protobuf:"bytes,3,opt,name=challenge,proto3" json:"challenge,omitempty"`
	Response_1   []byte `protobuf:"bytes,4,opt,name=response_1,json=response1,proto3" json:"response_1,omitempty"`
	Response_2   []byte `protobuf:"bytes,5,opt,name=response_2,json=response2,proto3" json:"response_2,omitempty"`
}

func (m *CiphertextValidityProof) Reset()         { *m = CiphertextValidityProof{} }
func (m *CiphertextValidityProof) String() string { return proto.CompactTextString(m) }
func (*CiphertextValidityProof) ProtoMessage()    {}
func (*CiphertextValidityProof) Descriptor() ([]byte, []int) {
	return fileDescriptor_71d8640cbb42ddec, []int{1}
}
func (m *CiphertextValidityProof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CiphertextValidityProof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CiphertextValidityProof.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CiphertextValidityProof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CiphertextValidityProof.Merge(m, src)
}
func (m *CiphertextValidityProof) XXX_Size() int {
	return m.Size()
}
func (m *CiphertextValidityProof) XXX_DiscardUnknown() {
	xxx_messageInfo_CiphertextValidityProof.DiscardUnknown(m)
}

var xxx_messageInfo_CiphertextValidityProof proto.InternalMessageInfo

func (m *CiphertextValidityProof) GetCommitment_1() []byte {
	if m != nil {
		return m.Commitment_1
	}
	return nil
}

func (m *CiphertextValidityProof) GetCommitment_2() []byte {
	if m != nil {
		return m.Commitment_2
	}
	return nil
}

func (m *CiphertextValidityProof) GetChallenge() []byte {
	if m != nil {
		return m.Challenge
	}
	return nil
}

func (m *CiphertextValidityProof) GetResponse_1() []byte {
	if m != nil {
		return m.Response_1
	}
	return nil
}

func (m *CiphertextValidityProof) GetResponse_2() []byte {
	if m != nil {
		return m.Response_2
	}
	return nil
}

func init() {
	proto.RegisterType((*TransferProofs)(nil), "seiprotocol.seichain.confidentialtransfers.TransferProofs")
	proto.RegisterType((*CiphertextValidityProof)(nil), "seiprotocol.seichain.confidentialtransfers.CiphertextValidityProof")
}

func init() { proto.RegisterFile("confidentialtransfers/zk.proto", fileDescriptor_71d8640cbb42ddec) }

var fileDescriptor_71d8640cbb42ddec = []byte{
	// 411 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x94, 0xbf, 0xae, 0xd3, 0x30,
	0x14, 0xc6, 0x6b, 0xfe, 0x5c, 0xe9, 0xfa, 0x46, 0x0c, 0x59, 0x60, 0x80, 0x08, 0x2e, 0x12, 0x54,
	0x20, 0x12, 0x25, 0x3c, 0x00, 0xa2, 0x5d, 0x18, 0x18, 0x50, 0x84, 0x90, 0x60, 0xb1, 0x5c, 0xf7,
	0xb4, 0x39, 0x22, 0xb1, 0x23, 0xdb, 0x45, 0x2d, 0x4f, 0xc1, 0xcc, 0x04, 0xef, 0xc0, 0xc6, 0x0b,
	0x30, 0x76, 0x64, 0x44, 0xed, 0x8b, 0xa0, 0xba, 0x4d, 0xdb, 0x84, 0xd2, 0xdb, 0xa1, 0xdd, 0xe2,
	0xe3, 0x73, 0xce, 0xf7, 0xd3, 0x77, 0x7c, 0x42, 0x03, 0xa1, 0xe4, 0x00, 0xfb, 0x20, 0x2d, 0xf2,
	0xdc, 0x6a, 0x2e, 0xcd, 0x00, 0xb4, 0x89, 0x3e, 0x7f, 0x0c, 0x4b, 0xad, 0xac, 0xf2, 0x9f, 0x18,
	0x40, 0xf7, 0x25, 0x54, 0x1e, 0x1a, 0x40, 0x91, 0x71, 0x94, 0xe1, 0xce, 0xa2, 0xcb, 0x1f, 0x67,
	0xf4, 0xd6, 0xdb, 0xd5, 0xe9, 0x8d, 0x56, 0x6a, 0x60, 0xfc, 0xef, 0x84, 0x3e, 0xd5, 0x50, 0x70,
	0x94, 0x28, 0x87, 0xac, 0xc7, 0x73, 0x2e, 0x05, 0x30, 0xa1, 0x8a, 0x02, 0x6d, 0x01, 0xd2, 0xb2,
	0x4f, 0x3c, 0xc7, 0x3e, 0xda, 0x09, 0x2b, 0x17, 0x05, 0x77, 0xc8, 0x7d, 0xd2, 0xbe, 0x48, 0xba,
	0xe1, 0xe1, 0xaa, 0x61, 0x17, 0xcb, 0x0c, 0xb4, 0x85, 0xb1, 0x7d, 0xb7, 0xea, 0xe5, 0xb4, 0xd3,
	0xc7, 0x6b, 0xdd, 0xce, 0x52, 0xb6, 0xbb, 0x56, 0xad, 0x25, 0xfa, 0x5f, 0x09, 0x6d, 0x1b, 0x90,
	0x7d, 0xd0, 0xac, 0xea, 0xca, 0x78, 0xa1, 0x46, 0xd2, 0xb2, 0x5c, 0x35, 0x01, 0xaf, 0x1d, 0x0f,
	0xf0, 0xe1, 0x52, 0xb4, 0x72, 0xec, 0xa5, 0x93, 0x7c, 0xad, 0x0e, 0x86, 0xcb, 0xb0, 0x09, 0x77,
	0xfd, 0xc4, 0x70, 0xaf, 0xb0, 0x0e, 0xf7, 0xcd, 0x4d, 0x57, 0x60, 0x89, 0x8b, 0x51, 0x5e, 0x6d,
	0xde, 0x8d, 0xe3, 0xf1, 0x3d, 0x5a, 0xeb, 0xee, 0xf7, 0x6f, 0x3f, 0xe2, 0xbf, 0x16, 0xde, 0x3c,
	0x3d, 0x62, 0xc3, 0xc5, 0xcb, 0x9f, 0x84, 0xde, 0xfe, 0x4f, 0x0f, 0xff, 0x01, 0xf5, 0xb6, 0x96,
	0x25, 0x76, 0xfb, 0xe1, 0xa5, 0x17, 0x9b, 0x58, 0xdc, 0x48, 0x49, 0xdc, 0x0b, 0xad, 0xa5, 0x24,
	0xfe, 0x5d, 0x7a, 0x2e, 0x32, 0x9e, 0xe7, 0x20, 0x87, 0xe0, 0x1e, 0x89, 0x97, 0x6e, 0x02, 0xfe,
	0x3d, 0x4a, 0x35, 0x98, 0x52, 0x49, 0x03, 0x2c, 0x76, 0x33, 0xf2, 0xd2, 0xf3, 0x2a, 0x12, 0xd7,
	0xae, 0x13, 0xe7, 0xcf, 0xd6, 0x75, 0xd2, 0x79, 0xff, 0x6b, 0x16, 0x90, 0xe9, 0x2c, 0x20, 0x7f,
	0x66, 0x01, 0xf9, 0x32, 0x0f, 0x5a, 0xd3, 0x79, 0xd0, 0xfa, 0x3d, 0x0f, 0x5a, 0x1f, 0x5e, 0x0c,
	0xd1, 0x66, 0xa3, 0x5e, 0x28, 0x54, 0x11, 0x19, 0xc0, 0x67, 0x95, 0x9f, 0xee, 0xe0, 0x0c, 0x8d,
	0xc6, 0xd1, 0xee, 0xdf, 0x8f, 0x9d, 0x94, 0x60, 0x7a, 0x67, 0xae, 0xe2, 0xf9, 0xdf, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x4a, 0x19, 0x74, 0xe9, 0xa4, 0x04, 0x00, 0x00,
}

func (m *TransferProofs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransferProofs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransferProofs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RecipientTransferAmountHiValidityProof != nil {
		{
			size, err := m.RecipientTransferAmountHiValidityProof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZk(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.RecipientTransferAmountLoValidityProof != nil {
		{
			size, err := m.RecipientTransferAmountLoValidityProof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZk(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.SenderTransferAmountHiValidityProof != nil {
		{
			size, err := m.SenderTransferAmountHiValidityProof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZk(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.SenderTransferAmountLoValidityProof != nil {
		{
			size, err := m.SenderTransferAmountLoValidityProof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZk(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.RemainingBalanceCommitmentValidityProof != nil {
		{
			size, err := m.RemainingBalanceCommitmentValidityProof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZk(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CiphertextValidityProof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CiphertextValidityProof) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CiphertextValidityProof) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Response_2) > 0 {
		i -= len(m.Response_2)
		copy(dAtA[i:], m.Response_2)
		i = encodeVarintZk(dAtA, i, uint64(len(m.Response_2)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Response_1) > 0 {
		i -= len(m.Response_1)
		copy(dAtA[i:], m.Response_1)
		i = encodeVarintZk(dAtA, i, uint64(len(m.Response_1)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Challenge) > 0 {
		i -= len(m.Challenge)
		copy(dAtA[i:], m.Challenge)
		i = encodeVarintZk(dAtA, i, uint64(len(m.Challenge)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Commitment_2) > 0 {
		i -= len(m.Commitment_2)
		copy(dAtA[i:], m.Commitment_2)
		i = encodeVarintZk(dAtA, i, uint64(len(m.Commitment_2)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Commitment_1) > 0 {
		i -= len(m.Commitment_1)
		copy(dAtA[i:], m.Commitment_1)
		i = encodeVarintZk(dAtA, i, uint64(len(m.Commitment_1)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintZk(dAtA []byte, offset int, v uint64) int {
	offset -= sovZk(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TransferProofs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RemainingBalanceCommitmentValidityProof != nil {
		l = m.RemainingBalanceCommitmentValidityProof.Size()
		n += 1 + l + sovZk(uint64(l))
	}
	if m.SenderTransferAmountLoValidityProof != nil {
		l = m.SenderTransferAmountLoValidityProof.Size()
		n += 1 + l + sovZk(uint64(l))
	}
	if m.SenderTransferAmountHiValidityProof != nil {
		l = m.SenderTransferAmountHiValidityProof.Size()
		n += 1 + l + sovZk(uint64(l))
	}
	if m.RecipientTransferAmountLoValidityProof != nil {
		l = m.RecipientTransferAmountLoValidityProof.Size()
		n += 1 + l + sovZk(uint64(l))
	}
	if m.RecipientTransferAmountHiValidityProof != nil {
		l = m.RecipientTransferAmountHiValidityProof.Size()
		n += 1 + l + sovZk(uint64(l))
	}
	return n
}

func (m *CiphertextValidityProof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Commitment_1)
	if l > 0 {
		n += 1 + l + sovZk(uint64(l))
	}
	l = len(m.Commitment_2)
	if l > 0 {
		n += 1 + l + sovZk(uint64(l))
	}
	l = len(m.Challenge)
	if l > 0 {
		n += 1 + l + sovZk(uint64(l))
	}
	l = len(m.Response_1)
	if l > 0 {
		n += 1 + l + sovZk(uint64(l))
	}
	l = len(m.Response_2)
	if l > 0 {
		n += 1 + l + sovZk(uint64(l))
	}
	return n
}

func sovZk(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozZk(x uint64) (n int) {
	return sovZk(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TransferProofs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransferProofs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransferProofs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainingBalanceCommitmentValidityProof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RemainingBalanceCommitmentValidityProof == nil {
				m.RemainingBalanceCommitmentValidityProof = &CiphertextValidityProof{}
			}
			if err := m.RemainingBalanceCommitmentValidityProof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderTransferAmountLoValidityProof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SenderTransferAmountLoValidityProof == nil {
				m.SenderTransferAmountLoValidityProof = &CiphertextValidityProof{}
			}
			if err := m.SenderTransferAmountLoValidityProof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderTransferAmountHiValidityProof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SenderTransferAmountHiValidityProof == nil {
				m.SenderTransferAmountHiValidityProof = &CiphertextValidityProof{}
			}
			if err := m.SenderTransferAmountHiValidityProof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecipientTransferAmountLoValidityProof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RecipientTransferAmountLoValidityProof == nil {
				m.RecipientTransferAmountLoValidityProof = &CiphertextValidityProof{}
			}
			if err := m.RecipientTransferAmountLoValidityProof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecipientTransferAmountHiValidityProof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RecipientTransferAmountHiValidityProof == nil {
				m.RecipientTransferAmountHiValidityProof = &CiphertextValidityProof{}
			}
			if err := m.RecipientTransferAmountHiValidityProof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthZk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CiphertextValidityProof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CiphertextValidityProof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CiphertextValidityProof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commitment_1", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commitment_1 = append(m.Commitment_1[:0], dAtA[iNdEx:postIndex]...)
			if m.Commitment_1 == nil {
				m.Commitment_1 = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commitment_2", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commitment_2 = append(m.Commitment_2[:0], dAtA[iNdEx:postIndex]...)
			if m.Commitment_2 == nil {
				m.Commitment_2 = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Challenge", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Challenge = append(m.Challenge[:0], dAtA[iNdEx:postIndex]...)
			if m.Challenge == nil {
				m.Challenge = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response_1", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response_1 = append(m.Response_1[:0], dAtA[iNdEx:postIndex]...)
			if m.Response_1 == nil {
				m.Response_1 = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response_2", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response_2 = append(m.Response_2[:0], dAtA[iNdEx:postIndex]...)
			if m.Response_2 == nil {
				m.Response_2 = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthZk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipZk(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowZk
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowZk
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowZk
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthZk
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupZk
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthZk
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthZk        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowZk          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupZk = fmt.Errorf("proto: unexpected end of group")
)
